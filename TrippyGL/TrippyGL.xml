<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TrippyGL</name>
    </assembly>
    <members>
        <member name="T:TrippyGL.ActiveVertexAttrib">
            <summary>
            Stores data about an active vertex attribute from a <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.ActiveVertexAttrib.Location">
            <summary>The attribute's location in the shader.</summary>
        </member>
        <member name="F:TrippyGL.ActiveVertexAttrib.Name">
            <summary>The name with which the attribute is declared.</summary>
        </member>
        <member name="F:TrippyGL.ActiveVertexAttrib.Size">
            <summary>The size of the attribute, measured in <see cref="F:TrippyGL.ActiveVertexAttrib.AttribType"/>-s.</summary>
        </member>
        <member name="F:TrippyGL.ActiveVertexAttrib.AttribType">
            <summary>The type of the attribute declared in the shader.</summary>
        </member>
        <member name="M:TrippyGL.ActiveVertexAttrib.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32)">
            <summary>
            Creates an <see cref="T:TrippyGL.ActiveVertexAttrib"/> and queries the attribute
            data from a specified attrib index in a <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> that owns the shader program.</param>
            <param name="programHandle">The handle of the shader program.</param>
            <param name="attribIndex">The attribute index to query the data from.</param>
        </member>
        <member name="T:TrippyGL.BlendState">
            <summary>
            Stores states used for color blending during rendering. The blending function uses various parameters
            such as the output fragment color and the current pixel color, allowing you to define your own way to blend.
            </summary>
        </member>
        <member name="F:TrippyGL.BlendState.IsOpaque">
            <summary>Whether the blend mode is opaque. If this is true, all other <see cref="T:TrippyGL.BlendState"/> properties are irrelevant.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.EquationModeRGB">
            <summary>The equation mode for the RGB color components.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.EquationModeAlpha">
            <summary>The equation mode for the Alpha color component.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.SourceFactorRGB">
            <summary>The source factor for the RGB color components.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.SourceFactorAlpha">
            <summary>The source factor for the Alpha color component.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.DestFactorRGB">
            <summary>The destination factor for the RGB color components.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.DestFactorAlpha">
            <summary>The destination factor for the Alpha color components.</summary>
        </member>
        <member name="F:TrippyGL.BlendState.BlendColor">
            <summary>This color can be used for blending calculations with the blending factors for constant color.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.EquationModeRGBA">
            <summary>Sets the equation mode for RGB and Alpha.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.SourceFactorRGBA">
            <summary>Sets the source blending factor for RGB and Alpha.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.DestFactorRGBA">
            <summary>Sets the destination blending factor for RGB and Alpha.</summary>
        </member>
        <member name="M:TrippyGL.BlendState.#ctor">
            <summary>
            Creates an empty, zeroed-out <see cref="T:TrippyGL.BlendState"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.BlendState.#ctor(System.Boolean)">
            <summary>
            Creates a simple <see cref="T:TrippyGL.BlendState"/> with additive blending equation parameters.
            </summary>
            <param name="isOpaque">Whether this <see cref="T:TrippyGL.BlendState"/> is opaque.</param>
        </member>
        <member name="M:TrippyGL.BlendState.#ctor(System.Boolean,Silk.NET.OpenGL.BlendEquationModeEXT,Silk.NET.OpenGL.BlendingFactor,Silk.NET.OpenGL.BlendingFactor,System.Numerics.Vector4)">
            <summary>
            Creates a <see cref="T:TrippyGL.BlendState"/> with a simple color-blending equation.
            </summary>
            <param name="isOpaque">Whether this <see cref="T:TrippyGL.BlendState"/> is opaque.</param>
            <param name="equationModeRgba">The equation mode to use for the RGBA values.</param>
            <param name="sourceFactorRgba">The source factor to use for the RGBA values.</param>
            <param name="destFactorRgba">The destination factor to use for the RGBA values.</param>
            <param name="blendColor">The equation-constant blending color.</param>
        </member>
        <member name="M:TrippyGL.BlendState.Clone">
            <summary>
            Creates a new <see cref="T:TrippyGL.BlendState"/> instance with the same values as this one.
            </summary>
        </member>
        <member name="P:TrippyGL.BlendState.Opaque">
            <summary>Gets a <see cref="T:TrippyGL.BlendState"/> where fragments are written 'as is' without any mixing.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.NonPremultiplied">
            <summary>Gets a <see cref="T:TrippyGL.BlendState"/> where fragments are mixed with non-premultiplied alpha.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.AlphaBlend">
            <summary>Gets a <see cref="T:TrippyGL.BlendState"/> where fragments are mixed using the source's alpha.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.Additive">
            <summary>Gets a <see cref="T:TrippyGL.BlendState"/> where fragments are mixed by adding them together.</summary>
        </member>
        <member name="P:TrippyGL.BlendState.Substractive">
            <summary>Gets a <see cref="T:TrippyGL.BlendState"/> where fragments are mixed by subscracting them together.</summary>
        </member>
        <member name="T:TrippyGL.BufferObject">
            <summary>
            Owns storage on the GPU's memory that can be used for various purposes though <see cref="T:TrippyGL.BufferObjectSubset"/>-s.
            </summary>
        </member>
        <member name="F:TrippyGL.BufferObject.Handle">
            <summary>The handle for the GL Buffer Object.</summary>
        </member>
        <member name="P:TrippyGL.BufferObject.UsageHint">
            <summary>The usage hint applied for this <see cref="T:TrippyGL.BufferObject"/>.</summary>
        </member>
        <member name="P:TrippyGL.BufferObject.StorageLengthInBytes">
            <summary>The length of this <see cref="T:TrippyGL.BufferObject"/>'s storage, measured in bytes.</summary>
        </member>
        <member name="M:TrippyGL.BufferObject.#ctor(TrippyGL.GraphicsDevice,System.UInt32,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Creates a <see cref="T:TrippyGL.BufferObject"/> with a specified length and usage hint.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="sizeInBytes">The desired size of the <see cref="T:TrippyGL.BufferObject"/>'s storage measured in bytes.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
        </member>
        <member name="M:TrippyGL.BufferObject.RecreateStorage(System.UInt32,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Recreate this <see cref="T:TrippyGL.BufferObject"/>'s storage with a new size and usage hint.
            The contents of the new storage are undefined after this operation.
            </summary>
            <param name="sizeInBytes">The new size for the <see cref="T:TrippyGL.BufferObject"/> measured in bytes.</param>
            <param name="usageHint">The new usage hint for the <see cref="T:TrippyGL.BufferObject"/>, or 0 to keep the previous hint.</param>
        </member>
        <member name="M:TrippyGL.BufferObject.ValidateBufferSize(System.UInt32)">
            <summary>
            Checks that the buffer size in bytes parameter is valid and throws an exception if it's not.
            </summary>
        </member>
        <member name="M:TrippyGL.BufferObject.ValidateBufferUsage(Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Checks that the usage hint parameter is valid and throws an exception if it's not.
            </summary>
        </member>
        <member name="T:TrippyGL.BufferObjectSubset">
            <summary>
            A subset of a <see cref="T:TrippyGL.BufferObject"/>'s storage that allows the same buffer to be used for various purposes.
            </summary>
        </member>
        <member name="F:TrippyGL.BufferObjectSubset.Buffer">
            <summary>The <see cref="T:TrippyGL.BufferObject"/> this subset belongs to.</summary>
        </member>
        <member name="F:TrippyGL.BufferObjectSubset.BufferHandle">
            <summary>The handle of the <see cref="T:TrippyGL.BufferObject"/> that owns this subset.</summary>
        </member>
        <member name="F:TrippyGL.BufferObjectSubset.BufferTarget">
            <summary>The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> to which this subset always binds to.</summary>
        </member>
        <member name="P:TrippyGL.BufferObjectSubset.StorageOffsetInBytes">
            <summary>The offset into this <see cref="F:TrippyGL.BufferObjectSubset.Buffer"/>'s storage at which this subset starts, measured in bytes.</summary>
        </member>
        <member name="P:TrippyGL.BufferObjectSubset.StorageLengthInBytes">
            <summary>The length of this subset's storage measured in bytes.</summary>
        </member>
        <member name="P:TrippyGL.BufferObjectSubset.StorageEndInBytes">
            <summary>
            The index of the next byte in the <see cref="T:TrippyGL.BufferObject"/>'s storage after this subset
            (a byte that does NOT belong to this subset but is sequentially next to this subset's end).<para/>
            </summary>
            <remarks>
            This is equal to (<see cref="P:TrippyGL.BufferObjectSubset.StorageOffsetInBytes"/> + <see cref="P:TrippyGL.BufferObjectSubset.StorageLengthInBytes"/>).
            </remarks>
        </member>
        <member name="F:TrippyGL.BufferObjectSubset.bufferTargetBindingIndex">
            <summary>
            The index in the <see cref="F:TrippyGL.GraphicsDevice.bufferBindings"/> array where this
            <see cref="T:TrippyGL.BufferObjectSubset"/>'s <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> last bound handle is stored.
            </summary>
        </member>
        <member name="M:TrippyGL.BufferObjectSubset.#ctor(TrippyGL.BufferObject,Silk.NET.OpenGL.BufferTargetARB)">
            <summary>
            Creates a <see cref="T:TrippyGL.BufferObjectSubset"/> with the given <see cref="T:TrippyGL.BufferObject"/> and
            target, but storage offset and length are left uninitialized.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="bufferTarget">The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> this subset will always bind to.</param>
        </member>
        <member name="M:TrippyGL.BufferObjectSubset.#ctor(TrippyGL.BufferObject,Silk.NET.OpenGL.BufferTargetARB,System.UInt32,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.BufferObjectSubset"/> with the given <see cref="T:TrippyGL.BufferObject"/> and
            target, offset into the buffer and storage length.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="bufferTarget">The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> this subset will always bind to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLengthBytes">The length of this subset measured in bytes.</param>
        </member>
        <member name="M:TrippyGL.BufferObjectSubset.InitializeStorage(System.UInt32,System.UInt32)">
            <summary>
            Sets and checks the <see cref="P:TrippyGL.BufferObjectSubset.StorageOffsetInBytes"/> and <see cref="P:TrippyGL.BufferObjectSubset.StorageLengthInBytes"/> values.
            </summary>
            <param name="storageOffsetBytes">The desired offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage for this subset measured in bytes.</param>
            <param name="storageLengthBytes">The desired storage length for this subset measured in bytes.</param>
        </member>
        <member name="T:TrippyGL.Color4b">
            <summary>
            A color with 4 unsigned byte components (R, G, B, A).
            </summary>
        </member>
        <member name="F:TrippyGL.Color4b.R">
            <summary>
            The red component of this <see cref="T:TrippyGL.Color4b"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.Color4b.G">
            <summary>
            The green component of this <see cref="T:TrippyGL.Color4b"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.Color4b.B">
            <summary>
            The blue component of this <see cref="T:TrippyGL.Color4b"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.Color4b.A">
            <summary>
            The alpha component of this <see cref="T:TrippyGL.Color4b"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PackedValue">
            <summary>Gets or sets this <see cref="T:TrippyGL.Color4b"/> represented as a single <see cref="T:System.UInt32"/> value.</summary>
            <remarks>Red is stored in the least significant 8 bits, and Alpha in the most significant 8 bits.</remarks>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> structure from the specified byte values.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> from the specified float values,
            represented on a normalized range (from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> with full alpha from the specified float values,
            represented on a normalized range (from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.Numerics.Vector4@)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> from the specified float values in
            a <see cref="T:System.Numerics.Vector4"/> represented on a normalized range (from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.Numerics.Vector3@)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> from the specified float values in
            a <see cref="T:System.Numerics.Vector3"/> represented in a normalized range (from 0.0 to 1.0)
            and full alpha.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> from a packed value.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.ToArgb">
            <summary>
            Converts this <see cref="T:TrippyGL.Color4b"/> into ARGB format.
            </summary>
            <remarks>
            Blue is stored in the 8 least significant bits, and Alpha in the 8 most significant bits.
            </remarks>
        </member>
        <member name="M:TrippyGL.Color4b.FromArgb(System.Int32)">
            <summary>
            Constructs a <see cref="T:TrippyGL.Color4b"/> from an integer in ARGB format.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.ToVector4">
            <summary>
            Converts this <see cref="T:TrippyGL.Color4b"/> into a <see cref="T:System.Numerics.Vector4"/> by normalizing
            the (R, G, B, A) components into a range [0-1].
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.ToVector3">
            <summary>
            Converts this <see cref="T:TrippyGL.Color4b"/> into a <see cref="T:System.Numerics.Vector3"/> by normalizing
            the (R, G, B) components into a range [0-1].
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.Multiply(TrippyGL.Color4b,System.Single)">
            <summary>
            Multiplies the RGB components of a <see cref="T:TrippyGL.Color4b"/> by a scale, rounding to the nearest value.
            </summary>
            <param name="color">The <see cref="T:TrippyGL.Color4b"/> to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <seealso cref="M:TrippyGL.Color4b.MultiplyIncludeAlpha(TrippyGL.Color4b,System.Single)"/>
        </member>
        <member name="M:TrippyGL.Color4b.MultiplyIncludeAlpha(TrippyGL.Color4b,System.Single)">
            <summary>
            Multiplies the RGBA components of a <see cref="T:TrippyGL.Color4b"/> by a scale, rounding to the nearest value.
            </summary>
            <param name="color">The <see cref="T:TrippyGL.Color4b"/> to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <seealso cref="M:TrippyGL.Color4b.Multiply(TrippyGL.Color4b,System.Single)"/>
        </member>
        <member name="M:TrippyGL.Color4b.FromHSV(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrippyGL.Color4b"/> with RGB values calculated from the given HSV values.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.FromHSV(System.Numerics.Vector3@)">
            <summary>
            Creates a <see cref="T:TrippyGL.Color4b"/> with RGB values calculated from the given HSV values.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.Add(TrippyGL.Color4b,TrippyGL.Color4b)">
            <summary>
            Adds together the components of two <see cref="T:TrippyGL.Color4b"/> structures into a new one.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.Substract(TrippyGL.Color4b,TrippyGL.Color4b)">
            <summary>
            Substracts the components of the second <see cref="T:TrippyGL.Color4b"/> from the components of the first.
            </summary>
        </member>
        <member name="M:TrippyGL.Color4b.Lerp(TrippyGL.Color4b,TrippyGL.Color4b,System.Single)">
            <summary>
            Interpolates linearly between two <see cref="T:TrippyGL.Color4b"/> values.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
        </member>
        <member name="M:TrippyGL.Color4b.SmoothStep(TrippyGL.Color4b,TrippyGL.Color4b,System.Single)">
            <summary>
            Interpolates between two <see cref="T:TrippyGL.Color4b"/> values using a cubic equation.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
        </member>
        <member name="P:TrippyGL.Color4b.Transparent">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 255, 255, 0).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.AliceBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (240, 248, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.AntiqueWhite">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (250, 235, 215, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Aqua">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 255, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Aquamarine">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (127, 255, 212, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Azure">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (240, 255, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Beige">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (245, 245, 220, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Bisque">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 228, 196, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Black">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 0, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.BlanchedAlmond">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 235, 205, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Blue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 0, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.BlueViolet">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (138, 43, 226, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Brown">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (165, 42, 42, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.BurlyWood">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (222, 184, 135, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.CadetBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (95, 158, 160, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Chartreuse">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (127, 255, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Chocolate">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (210, 105, 30, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Coral">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 127, 80, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.CornflowerBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (100, 149, 237, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Cornsilk">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 248, 220, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Crimson">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (220, 20, 60, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Cyan">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 255, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 0, 139, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkCyan">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 139, 139, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkGoldenrod">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (184, 134, 11, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (169, 169, 169, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 100, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkKhaki">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (189, 183, 107, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkMagenta">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (139, 0, 139, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkOliveGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (85, 107, 47, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkOrange">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 140, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkOrchid">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (153, 50, 204, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkRed">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (139, 0, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkSalmon">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (233, 150, 122, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkSeaGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (143, 188, 139, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkSlateBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (72, 61, 139, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkSlateGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (47, 79, 79, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkTurquoise">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 206, 209, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DarkViolet">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (148, 0, 211, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DeepPink">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 20, 147, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DeepSkyBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 191, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DimGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (105, 105, 105, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.DodgerBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (30, 144, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Firebrick">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (178, 34, 34, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.FloralWhite">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 250, 240, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.ForestGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (34, 139, 34, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Fuchsia">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 0, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Gainsboro">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (220, 220, 220, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.GhostWhite">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (248, 248, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Gold">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 215, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Goldenrod">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (218, 165, 32, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Gray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (128, 128, 128, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Green">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 128, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.GreenYellow">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (173, 255, 47, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Honeydew">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (240, 255, 240, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.HotPink">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 105, 180, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.IndianRed">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (205, 92, 92, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Indigo">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (75, 0, 130, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Ivory">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 255, 240, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Khaki">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (240, 230, 140, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Lavender">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (230, 230, 250, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LavenderBlush">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 240, 245, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LawnGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (124, 252, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LemonChiffon">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 250, 205, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (173, 216, 230, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightCoral">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (240, 128, 128, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightCyan">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (224, 255, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightGoldenrodYellow">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (250, 250, 210, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (144, 238, 144, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (211, 211, 211, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightPink">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 182, 193, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightSalmon">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 160, 122, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightSeaGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (32, 178, 170, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightSkyBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (135, 206, 250, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightSlateGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (119, 136, 153, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightSteelBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (176, 196, 222, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LightYellow">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 255, 224, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Lime">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 255, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.LimeGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (50, 205, 50, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Linen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (250, 240, 230, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Magenta">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 0, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Maroon">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (128, 0, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumAquamarine">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (102, 205, 170, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 0, 205, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumOrchid">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (186, 85, 211, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumPurple">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (147, 112, 219, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumSeaGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (60, 179, 113, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumSlateBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (123, 104, 238, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumSpringGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 250, 154, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumTurquoise">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (72, 209, 204, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MediumVioletRed">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (199, 21, 133, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MidnightBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (25, 25, 112, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MintCream">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (245, 255, 250, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.MistyRose">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 228, 225, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Moccasin">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 228, 181, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.NavajoWhite">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 222, 173, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Navy">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 0, 128, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.OldLace">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (253, 245, 230, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Olive">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (128, 128, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.OliveDrab">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (107, 142, 35, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Orange">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 165, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.OrangeRed">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 69, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Orchid">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (218, 112, 214, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PaleGoldenrod">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (238, 232, 170, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PaleGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (152, 251, 152, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PaleTurquoise">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (175, 238, 238, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PaleVioletRed">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (219, 112, 147, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PapayaWhip">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 239, 213, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PeachPuff">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 218, 185, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Peru">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (205, 133, 63, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Pink">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 192, 203, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Plum">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (221, 160, 221, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.PowderBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (176, 224, 230, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Purple">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (128, 0, 128, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Red">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 0, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.RosyBrown">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (188, 143, 143, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.RoyalBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (65, 105, 225, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SaddleBrown">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (139, 69, 19, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Salmon">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (250, 128, 114, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SandyBrown">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (244, 164, 96, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SeaGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (46, 139, 87, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SeaShell">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 245, 238, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Sienna">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (160, 82, 45, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Silver">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (192, 192, 192, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SkyBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (135, 206, 235, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SlateBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (106, 90, 205, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SlateGray">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (112, 128, 144, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Snow">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 250, 250, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SpringGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 255, 127, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.SteelBlue">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (70, 130, 180, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Tan">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (210, 180, 140, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Teal">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (0, 128, 128, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Thistle">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (216, 191, 216, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Tomato">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 99, 71, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Turquoise">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (64, 224, 208, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Violet">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (238, 130, 238, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Wheat">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (245, 222, 179, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.White">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 255, 255, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.WhiteSmoke">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (245, 245, 245, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.Yellow">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (255, 255, 0, 255).
            </summary>
        </member>
        <member name="P:TrippyGL.Color4b.YellowGreen">
            <summary>
            Gets a <see cref="T:TrippyGL.Color4b"/> with values (154, 205, 50, 255).
            </summary>
        </member>
        <member name="T:TrippyGL.DataBufferSubset">
            <summary>
            An abstract class for <see cref="T:TrippyGL.BufferObjectSubset"/> that manages a struct type across the entire subset.
            </summary>
        </member>
        <member name="P:TrippyGL.DataBufferSubset.StorageLength">
            <summary>The length of the subset's storage measured in elements.</summary>
        </member>
        <member name="F:TrippyGL.DataBufferSubset.ElementSize">
            <summary>The size of each element in the subset's storage measured in bytes.</summary>
        </member>
        <member name="M:TrippyGL.DataBufferSubset.ResizeSubset(System.UInt32,System.UInt32)">
            <summary>
            Changes the subset area of this <see cref="T:TrippyGL.DataBufferSubset"/>.
            </summary>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset.CalculateRequiredSizeInBytes``1(System.UInt32)">
            <summary>
            Calculates the required storage length in bytes required for a
            <see cref="T:TrippyGL.DataBufferSubset`1"/> with the specified storage length.
            </summary>
            <param name="storageLength">The desired length for the <see cref="T:TrippyGL.DataBufferSubset`1"/> measured in elements.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset.CopyBuffers``1(TrippyGL.DataBufferSubset{``0},System.UInt32,TrippyGL.DataBufferSubset{``0},System.UInt32,System.UInt32)">
            <summary>
            Copies data from a source <see cref="T:TrippyGL.DataBufferSubset`1"/> to a destination <see cref="T:TrippyGL.DataBufferSubset`1"/>.
            </summary>
            <param name="source">The <see cref="T:TrippyGL.DataBufferSubset`1"/> to copy data from.</param>
            <param name="sourceOffset">The index of the first element to copy from the source subset.</param>
            <param name="dest">The <see cref="T:TrippyGL.DataBufferSubset`1"/> to write data to.</param>
            <param name="destOffset">The index of of the first element to write on the dest subset.</param>
            <param name="dataLength">The amount of elements to copy.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset.CopyBuffers``1(TrippyGL.DataBufferSubset{``0},TrippyGL.DataBufferSubset{``0})">
            <summary>
            Copies all the data from a source <see cref="T:TrippyGL.DataBufferSubset`1"/> to a destination <see cref="T:TrippyGL.DataBufferSubset`1"/>.
            </summary>
            <param name="source">The <see cref="T:TrippyGL.DataBufferSubset`1"/> to copy data from.</param>
            <param name="dest">The <see cref="T:TrippyGL.DataBufferSubset`1"/> to write data to.</param>
        </member>
        <member name="T:TrippyGL.DataBufferSubset`1">
            <summary>
            An abstract class for <see cref="T:TrippyGL.BufferObjectSubset"/>-s that manages a struct type across the entire subset.
            </summary>
            <typeparam name="T">The type of struct (element) this <see cref="T:TrippyGL.DataBufferSubset`1"/> will manage.</typeparam>
        </member>
        <member name="M:TrippyGL.DataBufferSubset`1.#ctor(TrippyGL.BufferObject,Silk.NET.OpenGL.BufferTargetARB,System.UInt32,System.UInt32,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.DataBufferSubset`1"/> with the given <see cref="T:TrippyGL.BufferObject"/>
            and target, offset into the buffer in bytes, storage length in elements and optional initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="bufferTarget">The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> this subset will always bind to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset`1.#ctor(TrippyGL.BufferObject,Silk.NET.OpenGL.BufferTargetARB,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.DataBufferSubset`1"/> with the given <see cref="T:TrippyGL.BufferObject"/>
            and target, with the subset covering the entire buffer's storage and optional initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="bufferTarget">The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> this subset will always bind to.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset`1.SetData(System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Sets the data of a specified part of this subset's storage.
            The amount of elements written is the length of the given <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="data">The <see cref="T:System.ReadOnlySpan`1"/> containing the data to set.</param>
            <param name="storageOffset">The offset into the subset's storage to start writing to, measured in elements.</param>
        </member>
        <member name="M:TrippyGL.DataBufferSubset`1.GetData(System.Span{`0},System.UInt32)">
            <summary>
            Gets the data of a specified part of this subset's storage.
            The amount of elements read is the length of the given <see cref="T:System.Span`1"/>.
            </summary>
            <param name="data">The <see cref="T:System.Span`1"/> to which the returned data will be written to.</param>
            <param name="storageOffset">The offset into the subset's storage to start reading from, measured in elements.</param>
        </member>
        <member name="T:TrippyGL.DepthState">
            <summary>
            Stores states used depth testing. The depth testing function can be configured to obtain
            different results, such as discarding faraway fragments or discarding the nearest ones.
            </summary>
        </member>
        <member name="F:TrippyGL.DepthState.DepthTestingEnabled">
            <summary>
            Whether depth testing is enabled for this depth state.
            If false, all other <see cref="T:TrippyGL.DepthState"/> parameters are irrelevant.
            </summary>
        </member>
        <member name="F:TrippyGL.DepthState.ClearDepth">
            <summary>The depth value to use when clearing a depth buffer.</summary>
        </member>
        <member name="F:TrippyGL.DepthState.DepthComparison">
            <summary>The function for comparing depth values to determine whether the new value passes the depth test.</summary>
        </member>
        <member name="P:TrippyGL.DepthState.DepthRangeNear">
            <summary>The near depth value for the depth's range. Must be in the [0, 1] range.</summary>
        </member>
        <member name="P:TrippyGL.DepthState.DepthRangeFar">
            <summary>The far depth value for the depth's range. Must be in the [0, 1] range.</summary>
        </member>
        <member name="F:TrippyGL.DepthState.DepthBufferWrittingEnabled">
            <summary>Whether the depth buffer will be written to when a depth check succeeds.</summary>
        </member>
        <member name="M:TrippyGL.DepthState.#ctor(System.Boolean,Silk.NET.OpenGL.DepthFunction,System.Single,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a <see cref="T:TrippyGL.DepthState"/> with the specified depth testing parameters.
            </summary>
            <param name="testingEnabled">Whether depth testing is enabled.</param>
            <param name="comparison">The comparison mode that determines when a depth test succeedes.</param>
            <param name="clearDepth">The depth value to set on a clear operation.</param>
            <param name="nearRange">The near depth value for the depth's range.</param>
            <param name="farRange">The far depth value for the depth's range.</param>
            <param name="depthBufferWrittingEnabled">Whether writting into the depth buffer is enabled.</param>
        </member>
        <member name="M:TrippyGL.DepthState.Clone">
            <summary>
            Creates a new <see cref="T:TrippyGL.DepthState"/> instance with the same values as this one.
            </summary>
        </member>
        <member name="P:TrippyGL.DepthState.Default">
            <summary>
            The default, most common <see cref="T:TrippyGL.DepthState"/>.
            Checks that the depth of a fragment is closer to the camera or else, discards the fragment.
            </summary>
        </member>
        <member name="P:TrippyGL.DepthState.Inverted">
            <summary>
            The default and most common <see cref="T:TrippyGL.DepthState"/> but with an inverted
            comparison, so fragments will be discarded if they're closer to the camera.
            </summary>
        </member>
        <member name="P:TrippyGL.DepthState.ReadOnly">
            <summary>
            Gets a <see cref="T:TrippyGL.DepthState"/> with the same settings as <see cref="P:TrippyGL.DepthState.Default"/>,
            but writting to the depth buffer is disabled.
            </summary>
        </member>
        <member name="P:TrippyGL.DepthState.ReadOnlyInverted">
            <summary>
            Gets a <see cref="T:TrippyGL.DepthState"/> with the same settings as <see cref="P:TrippyGL.DepthState.Inverted"/>,
            but writting to the depth buffer is disabled.
            </summary>
        </member>
        <member name="P:TrippyGL.DepthState.None">
            <summary>
            Gets a <see cref="T:TrippyGL.DepthState"/> where no depth testing is done and all fragments are written.
            </summary>
        </member>
        <member name="T:TrippyGL.DirectionalLight">
            <summary>
            Represents a directional light on a shader and provides functionality
            to change it's diffuse/specular colors and direction.
            </summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.directionUniform">
            <summary>The uniform for setting this light's direction.</summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.diffuseColorUniform">
            <summary>The uniform for setting this light's diffuse color.</summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.specularColorUniform">
            <summary>The uniform for setting this light's specular color.</summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.direction">
            <summary>The last known value of this light's direction.</summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.diffuseColor">
            <summary>The last known value of this light's diffuse color.</summary>
        </member>
        <member name="F:TrippyGL.DirectionalLight.specularColor">
            <summary>The last known value of this light's specular color.</summary>
        </member>
        <member name="P:TrippyGL.DirectionalLight.Direction">
            <summary>
            Gets or sets this light's direction.
            </summary>
        </member>
        <member name="P:TrippyGL.DirectionalLight.DiffuseColor">
            <summary>
            Gets or sets this light's diffuse color.
            </summary>
        </member>
        <member name="P:TrippyGL.DirectionalLight.SpecularColor">
            <summary>
            Gets or sets this light's specular color
            </summary>
        </member>
        <member name="M:TrippyGL.DirectionalLight.#ctor(TrippyGL.ShaderUniform,TrippyGL.ShaderUniform,TrippyGL.ShaderUniform)">
            <summary>
            Creates a <see cref="T:TrippyGL.DirectionalLight"/> with the specified <see cref="T:TrippyGL.ShaderUniform"/>-s.
            </summary>
            <param name="directionUniform">The uniform for setting this light's direction. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
            <param name="diffuseColorUniform">The uniform for setting this light's diffuse color. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
            <param name="specularColorUniform">The uniform for setting this light's specular color. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
        </member>
        <member name="T:TrippyGL.TextureImageFormat">
            <summary>
            Specifies formats a <see cref="T:TrippyGL.Texture"/>'s image can have.
            </summary>
        </member>
        <member name="T:TrippyGL.DepthStencilFormat">
            <summary>
            Specifies depth and/or stencil formats a <see cref="T:TrippyGL.FramebufferObject"/> can have.
            </summary>
        </member>
        <member name="T:TrippyGL.FramebufferAttachmentPoint">
            <summary>
            Specifies the attachment points on a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.RenderbufferFormat">
            <summary>
            Specifies formats a <see cref="T:TrippyGL.RenderbufferObject"/>'s storage can have.
            </summary>
        </member>
        <member name="T:TrippyGL.CubemapFace">
            <summary>
            Specifies the faces of a <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.ReadPixelsFormat">
            <summary>
            Specifies formats for a read pixels operation on a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.BatcherBeginMode">
            <summary>
            Specifies options on how a <see cref="T:TrippyGL.TextureBatcher"/> handles drawing textures.
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.Deferred">
            <summary>
            Textures are drawn when End() is called in order of draw call, batching together where possible.
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.OnTheFly">
            <summary>
            Textures are drawn in order of draw call but the batcher doesn't wait until End() to flush all the calls.<para/>
            If the same texture is drawn consecutively the Draw()-s will still be batched into a single draw call.
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.Immediate">
            <summary>
            Each texture is drawn in it's own individual draw call, immediately, during Draw().
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.SortByTexture">
            <summary>
            Textures are drawn when End() is called, but first sorted by texture. This uses the least amount of draw
            calls, but doesn't retain order (depth testing can be used for ordering).
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.SortBackToFront">
            <summary>
            Textures are drawn when End() is called, but first sorted by depth in back-to-front order.
            This means items with higher depth get drawn before items with lower depth.<para/>
            Textures with the same depth aren't guaranteed to retain the order in which they were Draw()-n.
            </summary>
        </member>
        <member name="F:TrippyGL.BatcherBeginMode.SortFrontToBack">
            <summary>
            Textures are drawn when End() is called, but first sorted by depth in front-to-back order.
            This means items with lower depth get drawn before items with higher depth.<para/>
            Textures with the same depth aren't guaranteed to retain the order in which they were Draw()-n.
            </summary>
        </member>
        <member name="T:TrippyGL.ShaderCompilationException">
            <summary>
            An exception thrown when a shader didn't compile properly.
            </summary>
        </member>
        <member name="T:TrippyGL.ProgramLinkException">
            <summary>
            An exception thrown when a <see cref="T:TrippyGL.ShaderProgram"/> didn't link properly.
            </summary>
        </member>
        <member name="T:TrippyGL.FramebufferException">
            <summary>
            An exception thrown when a <see cref="T:TrippyGL.FramebufferObject"/> fails to be updated.
            </summary>
        </member>
        <member name="T:TrippyGL.InvalidBlitException">
            <summary>
            An exception thrown when a blit operation is invalid.
            </summary>
        </member>
        <member name="T:TrippyGL.InvalidFramebufferAttachmentException">
            <summary>
            An exception thrown when a <see cref="T:TrippyGL.FramebufferObject"/> can't attach a resource to an attachment point.
            </summary>
        </member>
        <member name="T:TrippyGL.BufferCopyException">
            <summary>
            An exception thrown when a buffer copy operation fails.
            </summary>
        </member>
        <member name="T:TrippyGL.ObjLoaderException">
            <summary>
            An exception thrown when an error ocurres while loading an OBJ file.
            </summary>
        </member>
        <member name="T:TrippyGL.Framebuffer2D">
            <summary>
            A helper type that provides an easy way to use a 2D <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.Framebuffer2D.IsEmpty">
            <summary>Whether this <see cref="T:TrippyGL.Framebuffer2D"/> has null values.</summary>
        </member>
        <member name="F:TrippyGL.Framebuffer2D.Framebuffer">
            <summary>This <see cref="T:TrippyGL.Framebuffer2D"/>'s backing <see cref="T:TrippyGL.FramebufferObject"/>.</summary>
        </member>
        <member name="F:TrippyGL.Framebuffer2D.Texture">
            <summary>The <see cref="T:TrippyGL.Texture2D"/> onto which this <see cref="T:TrippyGL.Framebuffer2D"/> renders.</summary>
        </member>
        <member name="P:TrippyGL.Framebuffer2D.Width">
            <summary>The width of this <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</summary>
        </member>
        <member name="P:TrippyGL.Framebuffer2D.Height">
            <summary>The height of this <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</summary>
        </member>
        <member name="P:TrippyGL.Framebuffer2D.Samples">
            <summary>The amount of samples this <see cref="T:TrippyGL.Framebuffer2D"/> has.</summary>
        </member>
        <member name="M:TrippyGL.Framebuffer2D.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32,TrippyGL.DepthStencilFormat,System.UInt32,TrippyGL.TextureImageFormat,System.Boolean)">
            <summary>
            Creates a <see cref="T:TrippyGL.Framebuffer2D"/> with the given width, height, and other optional parameters.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.Framebuffer2D"/> will use.</param>
            <param name="width">The width of the <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</param>
            <param name="height">The height of the <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</param>
            <param name="depthStencilFormat">The depth-stencil format for an optional renderbuffer attachment.</param>
            <param name="samples">The amount of samples for the <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</param>
            <param name="imageFormat">The format of the <see cref="T:TrippyGL.Framebuffer2D"/>'s image.</param>
            <param name="useDepthStencilTexture">Whether to use a texture for the depth-stencil buffer instead of a renderbuffer.</param>
        </member>
        <member name="M:TrippyGL.Framebuffer2D.Resize(System.UInt32,System.UInt32)">
            <summary>
            Resizes this <see cref="T:TrippyGL.Framebuffer2D"/>.
            </summary>
            <param name="width">The new width for the <see cref="T:TrippyGL.Framebuffer2D"/>.</param>
            <param name="height">The new height for the <see cref="T:TrippyGL.Framebuffer2D"/>.</param>
            <remarks>This resizes all the framebuffer attachments.</remarks>
        </member>
        <member name="M:TrippyGL.Framebuffer2D.TryGetDepthTexture(TrippyGL.Texture2D@)">
            <summary>
            Tries to get the <see cref="T:TrippyGL.Texture2D"/> attached to this <see cref="T:TrippyGL.Framebuffer2D"/> as depth buffer.
            </summary>
            <param name="depthTexture">The <see cref="T:TrippyGL.Texture2D"/> this <see cref="T:TrippyGL.Framebuffer2D"/> uses as depth buffer, if there is one.</param>
            <returns>Whether this <see cref="T:TrippyGL.Framebuffer2D"/> has a <see cref="T:TrippyGL.Texture2D"/> as depth buffer.</returns>
        </member>
        <member name="T:TrippyGL.FramebufferTextureAttachment">
            <summary>
            Represents an attachment of a <see cref="T:TrippyGL.Texture"/> to a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.FramebufferTextureAttachment.Texture">
            <summary>The <see cref="F:TrippyGL.FramebufferTextureAttachment.Texture"/> in this framebuffer attachment.</summary>
        </member>
        <member name="F:TrippyGL.FramebufferTextureAttachment.AttachmentPoint">
            <summary>The attachment point to which this attachment is attached in a <see cref="T:TrippyGL.FramebufferObject"/>.</summary>
        </member>
        <member name="M:TrippyGL.FramebufferTextureAttachment.#ctor(TrippyGL.Texture,TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Creates a <see cref="T:TrippyGL.FramebufferTextureAttachment"/>.
            </summary>
            <param name="texture">The <see cref="F:TrippyGL.FramebufferTextureAttachment.Texture"/> to attach in this attachment.</param>
            <param name="attachmentPoint">The attachment point to which this attachment attaches to.</param>
        </member>
        <member name="T:TrippyGL.FramebufferRenderbufferAttachment">
            <summary>
            Represents an attachment of a <see cref="T:TrippyGL.RenderbufferObject"/> to a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.FramebufferRenderbufferAttachment.Renderbuffer">
            <summary>The <see cref="T:TrippyGL.RenderbufferObject"/> in this framebuffer attachment.</summary>
        </member>
        <member name="F:TrippyGL.FramebufferRenderbufferAttachment.AttachmentPoint">
            <summary>The attachment point to which this attachment is attached in a <see cref="T:TrippyGL.FramebufferObject"/>.</summary>
        </member>
        <member name="M:TrippyGL.FramebufferRenderbufferAttachment.#ctor(TrippyGL.RenderbufferObject,TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Creates a <see cref="T:TrippyGL.FramebufferRenderbufferAttachment"/>.
            </summary>
            <param name="renderbuffer">The <see cref="T:TrippyGL.RenderbufferObject"/> to attach in this attachment.</param>
            <param name="attachmentPoint">The attachment point to which this attachment attaches to.</param>
        </member>
        <member name="T:TrippyGL.FramebufferObject">
            <summary>
            A configurable framebuffer that can be used to perform offscreen drawing operations.
            </summary>
        </member>
        <member name="F:TrippyGL.FramebufferObject.Handle">
            <summary>The handle for the GL Framebuffer Object.</summary>
        </member>
        <member name="P:TrippyGL.FramebufferObject.Width">
            <summary>The width of this <see cref="T:TrippyGL.FramebufferObject"/>'s image.</summary>
        </member>
        <member name="P:TrippyGL.FramebufferObject.Height">
            <summary>The height of this <see cref="T:TrippyGL.FramebufferObject"/>'s image.</summary>
        </member>
        <member name="P:TrippyGL.FramebufferObject.Samples">
            <summary>The amount of samples this <see cref="T:TrippyGL.FramebufferObject"/> has.</summary>
        </member>
        <member name="P:TrippyGL.FramebufferObject.TextureAttachmentCount">
            <summary>The amount of <see cref="T:TrippyGL.Texture"/> attachments this <see cref="T:TrippyGL.FramebufferObject"/> has.</summary>
        </member>
        <member name="P:TrippyGL.FramebufferObject.RenderbufferAttachmentCount">
            <summary>The amount of <see cref="T:TrippyGL.RenderbufferObject"/> attachments this <see cref="T:TrippyGL.FramebufferObject"/> has.</summary>
        </member>
        <member name="M:TrippyGL.FramebufferObject.#ctor(TrippyGL.GraphicsDevice)">
            <summary>
            Creates a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.Attach(TrippyGL.Texture,TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Attaches a <see cref="T:TrippyGL.Texture"/> to this <see cref="T:TrippyGL.FramebufferObject"/> in a specified attachment point.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture"/> to attach.</param>
            <param name="attachmentPoint">The attachment point to attach the <see cref="T:TrippyGL.Texture"/> to.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.Attach(TrippyGL.RenderbufferObject,TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Attaches a <see cref="T:TrippyGL.RenderbufferObject"/> to this <see cref="T:TrippyGL.FramebufferObject"/> in a specified attachment point.
            </summary>
            <param name="renderbuffer">The <see cref="T:TrippyGL.RenderbufferObject"/> to attach.</param>
            <param name="attachmentPoint">The attachment point to attach the <see cref="T:TrippyGL.RenderbufferObject"/> to.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.Detach(TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Detaches whatever is in an attachment point.
            Throws an exception if there is no such attachment.
            </summary>
            <param name="attachmentPoint">The attachment point to clear.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.TryDetachTexture(TrippyGL.FramebufferAttachmentPoint,TrippyGL.FramebufferTextureAttachment@)">
            <summary>
            Tries to detach a <see cref="T:TrippyGL.Texture"/> attached to the specified attachment point.
            </summary>
            <param name="point">The attachment point to check.</param>
            <param name="attachment">The detached <see cref="T:TrippyGL.Texture"/> attachment, if the method returned true.</param>
            <returns>Returns whether the operation succeeded.</returns>
        </member>
        <member name="M:TrippyGL.FramebufferObject.TryDetachRenderbuffer(TrippyGL.FramebufferAttachmentPoint,TrippyGL.FramebufferRenderbufferAttachment@)">
            <summary>
            Tries to detach a <see cref="T:TrippyGL.RenderbufferObject"/> attached to the specified point.
            </summary>
            <param name="point">The attachment point to check.</param>
            <param name="attachment">The detached <see cref="T:TrippyGL.RenderbufferObject"/> attachment, if the method returned true.</param>
            <returns>Returns whether the operation succeded.</returns>
        </member>
        <member name="M:TrippyGL.FramebufferObject.HasAttachment(TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Returns whether the specified attachment point is in use.
            </summary>
            <param name="attachmentType">The attachment point to check.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.GetStatus">
            <summary>
            Gets the status of the <see cref="T:TrippyGL.FramebufferObject"/>. 
            </summary>
        </member>
        <member name="M:TrippyGL.FramebufferObject.UpdateFramebufferData">
            <summary>
            Updates the <see cref="T:TrippyGL.FramebufferObject"/>'s parameters and checks that the framebuffer is valid.
            This should always be called after being done attaching or detaching resources.
            </summary>
        </member>
        <member name="M:TrippyGL.FramebufferObject.TryGetTextureAttachment(TrippyGL.FramebufferAttachmentPoint,TrippyGL.FramebufferTextureAttachment@)">
            <summary>
            Gets a <see cref="T:TrippyGL.Texture"/> attachment from this <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
            <param name="attachmentPoint">The point to look for a texture attachment at.</param>
            <param name="attachment">The attachment found.</param>
            <returns>Whether a texture attachment was found at the specified attachment point.</returns>
        </member>
        <member name="M:TrippyGL.FramebufferObject.TryGetRenderbufferAttachment(TrippyGL.FramebufferAttachmentPoint,TrippyGL.FramebufferRenderbufferAttachment@)">
            <summary>
            Gets a <see cref="T:TrippyGL.RenderbufferObject"/> attachment from this <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
            <param name="attachmentPoint">The point to look for a renderbuffer attachment at.</param>
            <param name="attachment">The attachment found.</param>
            <returns>Whether a renderbuffer attachment was found at the specified attachment point.</returns>
        </member>
        <member name="M:TrippyGL.FramebufferObject.ReadPixelsPtr(System.Void*,System.Int32,System.Int32,System.UInt32,System.UInt32,TrippyGL.ReadPixelsFormat,Silk.NET.OpenGL.PixelType)">
            <summary>
            Reads pixels from this <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
            <param name="ptr">The pointer to which the pixel data will be written.</param>
            <param name="x">The X coordinate of the first pixel to read.</param>
            <param name="y">The (invertex) Y coordinate of the first pixel to read.</param>
            <param name="width">The width of the rectangle of pixels to read.</param>
            <param name="height">The height of the rectangle of pixels to read.</param>
            <param name="pixelFormat">The format the pixel data will be read as.</param>
            <param name="pixelType">The format the pixel data is stored as.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.ReadPixels``1(System.Span{``0},System.Int32,System.Int32,System.UInt32,System.UInt32,TrippyGL.ReadPixelsFormat,Silk.NET.OpenGL.PixelType)">
            <summary>
            Reads pixels from this <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
            <typeparam name="T">A struct with the same format as a pixel to read.</typeparam>
            <param name="data">The span to which the data will be written.</param>
            <param name="x">The X coordinate of the first pixel to read.</param>
            <param name="y">The (invertex) Y coordinate of the first pixel to read.</param>
            <param name="width">The width of the rectangle of pixels to read.</param>
            <param name="height">The height of the rectangle of pixels to read.</param>
            <param name="pixelFormat">The format the pixel data will be read as.</param>
            <param name="pixelType">The format the pixel data is stored as.</param>
        </member>
        <member name="M:TrippyGL.FramebufferObject.DisposeAttachments">
            <summary>
            Disposes all of the attachments.
            </summary>
        </member>
        <member name="T:TrippyGL.GeometryShaderData">
            <summary>
            Stores data about a Geometry Shader.
            </summary>
        </member>
        <member name="F:TrippyGL.GeometryShaderData.GeometryInputType">
            <summary>The <see cref="T:Silk.NET.OpenGL.PrimitiveType"/> the geometry shader takes as input.</summary>
        </member>
        <member name="F:TrippyGL.GeometryShaderData.GeometryOutputType">
            <summary>The <see cref="T:Silk.NET.OpenGL.PrimitiveType"/> the geometry shader takes as output.</summary>
        </member>
        <member name="F:TrippyGL.GeometryShaderData.GeometryShaderInvocations">
            <summary>The amount of invocations the geometry shader will do.</summary>
        </member>
        <member name="F:TrippyGL.GeometryShaderData.GeometryVerticesOut">
            <summary>The maximum amount of vertices the geometry shader can output.</summary>
        </member>
        <member name="T:TrippyGL.GraphicsDevice">
            <summary>
            Manages an OpenGL Context and it's <see cref="T:TrippyGL.GraphicsResource"/>-s.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.BufferTargetCount">
            <summary>
            This constant defines the total amount of buffer targets. This defines the array sizes
            for <see cref="F:TrippyGL.GraphicsDevice.bufferBindings"/> and <see cref="F:TrippyGL.GraphicsDevice.bufferBindingTargets"/> arrays.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.bufferBindings">
            <summary>
            Stores the handle of the last buffer bound to the <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>
            found on the same index on the <see cref="F:TrippyGL.GraphicsDevice.bufferBindingTargets"/> array.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.bufferBindingTargets">
            <summary>The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>-s for the handles found on the <see cref="F:TrippyGL.GraphicsDevice.bufferBindings"/> array.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.bufferRangeBindings">
            <summary>
            For the <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>-s that have range bindings, this is an
            array of arrays that contain the bound buffer and the bound range of each binding index.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.InitBufferObjectStates">
            <summary>
            Initializes all the fields needed for buffer binding.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ArrayBuffer">
            <summary>Gets or sets (binds) the <see cref="T:TrippyGL.BufferObject"/> currently bound to GL_ARRAY_BUFFER.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.CopyReadBuffer">
            <summary>Gets or sets (binds) the <see cref="T:TrippyGL.BufferObject"/> currently bound to GL_COPY_READ_BUFFER.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.CopyWriteBuffer">
            <summary>Gets or sets (binds) the <see cref="T:TrippyGL.BufferObject"/> currently bound to GL_COPY_WRITE_BUFFER.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindBufferObject(TrippyGL.BufferObject)">
            <summary>
            Binds a buffer to the default binding location.
            </summary>
            <param name="buffer">The buffer to bind. This value is assumed not to be null.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindBufferObject(TrippyGL.BufferObject)">
            <summary>
            Binds a buffer to the default binding location without first checking whether it's already bound.
            </summary>
            <param name="buffer">The buffer to bind. This value is assumed not to be null.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindBuffer(TrippyGL.BufferObjectSubset)">
            <summary>
            Binds a buffer subset to it's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>.
            </summary>
            <param name="bufferSubset">The buffer subset to bind.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindBuffer(TrippyGL.BufferObjectSubset)">
            <summary>
            Binds a buffer subset to it's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> without first checking whether it's already bound.
            </summary>
            <param name="bufferSubset">The buffer subset to bind. This value is assumed not to be null.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindBufferRange(TrippyGL.BufferObjectSubset,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Binds a range of a buffer subset to a binding index on it's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>
            The buffer subset's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> must be one with multiple binding indexes.
            </summary>
            <param name="bufferSubset">The buffer subset to bind.</param>
            <param name="bindingIndex">The binding index in the buffer target where the buffer will be bound.</param>
            <param name="offset">The offset in bytes into the buffer's storage where the bind begins.</param>
            <param name="size">The amount of bytes that can be read from the storage, starting from offset.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindBufferRange(TrippyGL.BufferObjectSubset,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Binds a range of a buffer to a binding index on it's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> without first checking whether it's already bound.
            The buffer object's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> must be one with multiple binding indexes.
            </summary>
            <param name="buffer">The buffer to bind. This value is assumed not to be null.</param>
            <param name="bindingIndex">The binding index in the buffer target where the buffer will be bound.</param>
            <param name="offset">The offset in bytes into the buffer's storage where the bind begins.</param>
            <param name="size">The amount of bytes that can be read from the storage, starting from offset.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindBufferCopyRead(TrippyGL.BufferObject)">
            <summary>
            Binds a buffer to the GL_COPY_READ_BUFFER target without first checking whether it's already bound.
            </summary>
            <param name="buffer">The buffer to bind.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindBufferCopyWrite(TrippyGL.BufferObject)">
            <summary>
            Binds a buffer to the GL_COPY_WRITE_BUFFER taret without first checking whether it's already bound.
            </summary>
            <param name="buffer">The buffer to bind.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.IsBufferCurrentlyBound(TrippyGL.BufferObjectSubset)">
            <summary>
            Returns whether the given buffer subset is the currently bound one for it's <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>.
            </summary>
            <param name="buffer">The buffer subset to check.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.GetBindingTargetIndex(Silk.NET.OpenGL.BufferTargetARB)">
            <summary>
            Gets the index on the <see cref="F:TrippyGL.GraphicsDevice.bufferBindings"/> array for the specified <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>.
            If there's no such index, it returns -1, though this won't happen as long as you only use proper <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> enum values.
            </summary>
            <param name="bufferTarget">The <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> to get the binds list index for.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetBufferStates">
            <summary>
            Resets all saved states for buffer objects to the last values known by this <see cref="T:TrippyGL.GraphicsDevice"/>.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="T:TrippyGL.GraphicsDevice.BufferRangeBinding">
            <summary>
            This struct is used to manage buffer object binding in cases where a buffer can be bound to multiple indices in the same target.
            Each <see cref="T:TrippyGL.GraphicsDevice.BufferRangeBinding"/> represents one of these binding points in a <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/>.
            Of course, this must be in a <see cref="T:Silk.NET.OpenGL.BufferTargetARB"/> to which multiple buffers can be bound.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BufferRangeBinding.SetRange(TrippyGL.BufferObjectSubset,System.UInt32,System.UInt32)">
            <summary>
            Set the values of this <see cref="T:TrippyGL.GraphicsDevice.BufferRangeBinding"/> to the specified range of the given buffer.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BufferRangeBinding.SetRange(TrippyGL.BufferObjectSubset)">
            <summary>
            Sets the values of this <see cref="T:TrippyGL.GraphicsDevice.BufferRangeBinding"/> to the entire given subset.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.VertexArray">
            <summary>Gets or sets (binds) the currently bound <see cref="T:TrippyGL.VertexArray"/>.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindVertexArray(TrippyGL.VertexArray)">
            <summary>
            Binds a <see cref="T:TrippyGL.VertexArray"/> without first checking whether it's already bound.
            </summary>
            <param name="array">The <see cref="T:TrippyGL.VertexArray"/> to bind.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetVertexArrayStates">
            <summary>
            Resets vertex array states to the last values known by this <see cref="T:TrippyGL.GraphicsDevice"/>.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ShaderProgram">
            <summary>Gets or sets (binds) the currently bound <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceUseShaderProgram(TrippyGL.ShaderProgram)">
            <summary>
            Installs the given <see cref="T:TrippyGL.ShaderProgram"/> into the rendering
            pipeline without first checking whether it's already in use.
            </summary>
            <param name="program">The <see cref="T:TrippyGL.ShaderProgram"/> to use.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetShaderProgramStates">
            <summary>
            Resets all saved states for shader programs. This is, the variables used to check whether to use a shader program or not.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.textureBindings">
            <summary>The array containing for each texture unit (that is, the index of the array) which texture handle is bound to it.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.nextBindUnit">
            <summary>This variable counts which texture unit will be used the next time a texture needs binding.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ActiveTextureUnit">
            <summary>The currently active texture unit.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.GetNextBindTextureUnit">
            <summary>
            When a <see cref="T:TrippyGL.Texture"/> needs a new binding, it requests a texture unit from this method.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.SetActiveTexture(System.Int32)">
            <summary>
            Ensures a texture unit is the currently active one.
            </summary>
            <param name="textureUnit">The index of the texture unit. Must be in the range [0, <see cref="P:TrippyGL.GraphicsDevice.MaxTextureImageUnits"/>).</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceSetActiveTextureUnit(System.Int32)">
            <summary>
            Sets the active texture unit without first checking whether it's the currently active texture unit.
            </summary>
            <param name="textureUnit">The index of the texture unit. Must be in the range [0, <see cref="P:TrippyGL.GraphicsDevice.MaxTextureImageUnits"/>).</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindTexture(TrippyGL.Texture)">
            <summary>
            Ensures a <see cref="T:TrippyGL.Texture"/> is bound to any texture unit, but doesn't
            ensure that texture unit is the currently active one.
            </summary>
            <returns>The texture unit to which the <see cref="T:TrippyGL.Texture"/> is bound.</returns>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindTextureSetActive(TrippyGL.Texture)">
            <summary>
            Ensures a <see cref="T:TrippyGL.Texture"/> is bound to any texture unit, and that the
            texture unit to which said <see cref="T:TrippyGL.Texture"/> is bound is the currently active one.
            </summary>
            <returns>The texture unit to which the <see cref="T:TrippyGL.Texture"/> is bound.</returns>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindTexture(TrippyGL.Texture)">
            <summary>
            Binds a <see cref="T:TrippyGL.Texture"/> to any texture unit.
            </summary>
            <returns>
            The texture unit to which the <see cref="T:TrippyGL.Texture"/> is now bound to.
            The returned texture unit will also always be the currently active one.
            </returns>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindTextureToCurrentUnit(TrippyGL.Texture)">
            <summary>
            Binds a <see cref="T:TrippyGL.Texture"/> to the currently active texture unit.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindAllTextures(System.ReadOnlySpan{TrippyGL.Texture})">
            <summary>
            Ensures all of the given <see cref="T:TrippyGL.Texture"/>-s are bound to a texture unit. Nulls are ignored.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BindAllTextures(System.Collections.Generic.List{TrippyGL.Texture})">
            <summary>
            Ensures all of the given <see cref="T:TrippyGL.Texture"/>-s are bound to a texture unit. Nulls are ignored.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.IsTextureBound(TrippyGL.Texture)">
            <summary>
            Returns whether a <see cref="T:TrippyGL.Texture"/> is the one currently bound to it's last bind location.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.InitTextureStates">
            <summary>
            Initiates all variables that track texture binding states.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetTextureStates">
            <summary>
            Resets all saved states for textures.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.DrawFramebuffer">
            <summary>Gets or sets (binds) the <see cref="T:TrippyGL.FramebufferObject"/> currently bound for drawing.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ReadFramebuffer">
            <summary>Gets or sets (binds) the <see cref="T:TrippyGL.FramebufferObject"/> currently bound for reading.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.Framebuffer">
            <summary>Sets (binds) a <see cref="T:TrippyGL.FramebufferObject"/> for both drawing and reading.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.Renderbuffer">
            <summary>Gets or sets (binds) the current <see cref="T:TrippyGL.RenderbufferObject"/>.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindDrawFramebuffer(TrippyGL.FramebufferObject)">
            <summary>
            Binds a <see cref="T:TrippyGL.FramebufferObject"/> for drawing without first checking whether it's already bound.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindReadFramebuffer(TrippyGL.FramebufferObject)">
            <summary>
            Binds a <see cref="T:TrippyGL.FramebufferObject"/> for reading without first checking whether it's already bound.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ForceBindRenderbuffer(TrippyGL.RenderbufferObject)">
            <summary>
            Binds a <see cref="T:TrippyGL.RenderbufferObject"/> without first checking whether it's already bound.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetFramebufferStates">
            <summary>
            Resets all saved states for framebuffers and renderbuffers.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.GL">
            <summary>
            The <see cref="T:Silk.NET.OpenGL.GL"/> object that all <see cref="T:TrippyGL.GraphicsResource"/>-s
            on this <see cref="T:TrippyGL.GraphicsDevice"/> will use to call GL functions.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.IsDisposed">
            <summary>Whether this <see cref="T:TrippyGL.GraphicsDevice"/> instance has been disposed.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.#ctor(Silk.NET.OpenGL.GL)">
            <summary>
            Creates a <see cref="T:TrippyGL.GraphicsDevice"/> to manage the given graphics context.
            </summary>
            <param name="gl">The <see cref="T:Silk.NET.OpenGL.GL"/> object this <see cref="T:TrippyGL.GraphicsDevice"/> will use for GL calls.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetStates">
            <summary>
            Resets all GL states to either zero or the last values this <see cref="T:TrippyGL.GraphicsDevice"/> knows.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="E:TrippyGL.GraphicsDevice.DebugMessageReceived">
            <summary>An event for recieving OpenGL debug messages. Debug messaging must be enabled for this to work.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.DebugMessagingEnabled">
            <summary>Whether OpenGL message debugging is enabled (using the KHR_debug extension or v4.3).</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.Clear(Silk.NET.OpenGL.ClearBufferMask)">
            <summary>
            Clears the current framebuffer to the specified color.
            </summary>
            <param name="mask">The masks indicating the values to clear, combined using bitwise OR.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DrawArrays(Silk.NET.OpenGL.PrimitiveType,System.Int32,System.UInt32)">
            <summary>
            Renders primitive data.
            </summary>
            <param name="primitiveType">The type of primitive to render.</param>
            <param name="startIndex">The index of the first vertex to render.</param>
            <param name="count">The amount of vertices to render.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DrawElements(Silk.NET.OpenGL.PrimitiveType,System.Int32,System.UInt32)">
            <summary>
            Renders indexed primitive data.
            </summary>
            <param name="primitiveType">The type of primitive to render.</param>
            <param name="startIndex">The index of the first element to render.</param>
            <param name="count">The amount of elements to render.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DrawArraysInstanced(Silk.NET.OpenGL.PrimitiveType,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Renders instanced primitive data.
            </summary>
            <param name="primitiveType">The type of primitive to render.</param>
            <param name="startIndex">The index of the first element to render.</param>
            <param name="count">The amount of elements to render.</param>
            <param name="instanceCount">The amount of instances to render.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DrawElementsInstanced(Silk.NET.OpenGL.PrimitiveType,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Renders indexed instanced primitive data.
            </summary>
            <param name="primitiveType">The type of primitive to render.</param>
            <param name="startIndex">The index of the first element to render.</param>
            <param name="count">The amount of elements to render.</param>
            <param name="instanceCount">The amount of instances to render.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BlitFramebuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Silk.NET.OpenGL.ClearBufferMask,Silk.NET.OpenGL.BlitFramebufferFilter)">
            <summary>
            Copies content from the read framebuffer to the draw framebuffer.
            </summary>
            <param name="srcX">The X location of the first pixel to read.</param>
            <param name="srcY">The Y location of the first pixel to read.</param>
            <param name="srcWidth">The width of the read rectangle.</param>
            <param name="srcHeight">The height of the read rectangle.</param>
            <param name="dstX">The X location of the first pixel to write.</param>
            <param name="dstY">The Y location of the first pixel to write.</param>
            <param name="dstWidth">The width of the write rectangle.</param>
            <param name="dstHeight">The height of the draw rectangle.</param>
            <param name="mask">What data to copy from the framebuffers.</param>
            <param name="filter">Whether to use nearest or linear filtering.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.BlitFramebuffer(TrippyGL.Viewport,TrippyGL.Viewport,Silk.NET.OpenGL.ClearBufferMask,Silk.NET.OpenGL.BlitFramebufferFilter)">
            <summary>
            Copies content from the read framebuffer to the draw framebuffer.
            </summary>
            <param name="srcRect">The source rectangle to copy from.</param>
            <param name="dstRect">The destination rectangle to write to.</param>
            <param name="mask">What data to copy from the framebuffers.</param>
            <param name="filter">Whether to use nearest or linear filtering.</param>
        </member>
        <member name="E:TrippyGL.GraphicsDevice.ShaderCompiled">
            <summary>
            Occurs whenever a <see cref="T:TrippyGL.ShaderProgram"/> compiles, whether it fails or succeeds.
            </summary>
            <remarks>
            Even if the shaders were compiled specifying not to get compilation logs, if compilation failed
            then logs will be queried from OpenGL anyway, but only for the particular thing that failed.<para/>
            The "success" parameter will only be true if the whole operation, including program linking, succeeded.
            </remarks>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.OnShaderCompiled(TrippyGL.ShaderProgramBuilder@,System.Boolean)">
            <summary>
            Raises the <see cref="E:TrippyGL.GraphicsDevice.ShaderCompiled"/> event.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.OnResourceAdded(TrippyGL.GraphicsResource)">
            <summary>
            This is called by all <see cref="T:TrippyGL.GraphicsResource"/>-s on creation.
            </summary>
            <param name="createdResource">The newly created resource.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.OnResourceRemoved(TrippyGL.GraphicsResource)">
            <summary>
            This is called by <see cref="T:TrippyGL.GraphicsResource"/>-s on <see cref="M:TrippyGL.GraphicsResource.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposedResource">The graphics resource that was just disposed.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DisposeAllResources">
            <summary>
            Disposes all the <see cref="T:TrippyGL.GraphicsResource"/>-s owned by this <see cref="T:TrippyGL.GraphicsDevice"/>. This does not dispose the
            <see cref="T:TrippyGL.GraphicsDevice"/>, so it can still be used for new resources afterwards.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.FlushCommands">
            <summary>
            Ensures all OpenGL commands given before this function was called are
            not being queued up (doesn't wait for them to finish).
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.FinishCommands">
            <summary>
            Waits for all current OpenGL commands to finish being executed.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.IsGLVersionAtLeast(System.Int32,System.Int32)">
            <summary>
            Returns whether the GL version is the specified version or newer.
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.EnsureNotDisposed">
            <summary>
            Checks whether this <see cref="T:TrippyGL.GraphicsDevice"/> is already disposed and throws an exception if it is.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.Dispose">
            <summary>
            Disposes this <see cref="T:TrippyGL.GraphicsDevice"/>, it's <see cref="T:TrippyGL.GraphicsResource"/>-s and it's context.
            The <see cref="T:TrippyGL.GraphicsDevice"/> nor it's resources can be used once it's been disposed.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.clearColor">
            <summary>Backing field for <see cref="P:TrippyGL.GraphicsDevice.ClearColor"/>.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ClearColor">
            <summary>Gets or sets the current color to use on clear operations.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.viewport">
            <summary>Backing field for <see cref="P:TrippyGL.GraphicsDevice.Viewport"/>.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.Viewport">
            <summary>Gets or sets the current viewport for drawing.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.SetViewport(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Sets the current viewport for drawing.
            </summary>
            <param name="x">The viewport's X.</param>
            <param name="y">The viewport's Y.</param>
            <param name="width">The viewport's width.</param>
            <param name="height">The viewport's height.</param>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.scissorTestEnabled">
            <summary>Backing field for <see cref="P:TrippyGL.GraphicsDevice.ScissorTestEnabled"/>.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.scissorRect">
            <summary>Backing field for <see cref="P:TrippyGL.GraphicsDevice.ScissorRectangle"/>.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ScissorTestEnabled">
            <summary>Gets or sets whether scissor testing is enable.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle that discards fragments rendered outside it.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.SetScissorRectangle(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Sets the current scissor rectangle.
            </summary>
            <param name="x">The scissor rectangle's X.</param>
            <param name="y">The scissor rectangle's Y.</param>
            <param name="width">The scissor rectangle's width.</param>
            <param name="height">The scissor rectangle's height.</param>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.blendState">
            <summary>The currently applied <see cref="T:TrippyGL.BlendState"/> values.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.BlendState">
            <summary>Gets or sets the <see cref="T:TrippyGL.BlendState"/> used for drawing.</summary>
            <remarks>
            Getting this property returns a cloned object. Modifying that object doesn't
            automatically apply changes to this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.BlendingEnabled">
            <summary>Enables or disables color blending.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.depthState">
            <summary>The current depth state.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.DepthState">
            <summary>Sets the <see cref="T:TrippyGL.DepthState"/> used for drawing.</summary>
            <remarks>
            Getting this property returns a cloned object. Modifying that object doesn't
            automatically apply changes to this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.DepthTestingEnabled">
            <summary>Enables or disables depth testing.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ClearDepth">
            <summary>The depth value to set on a clear depth operation.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetDepthStates">
            <summary>
            Sets all depth states to the last values known by this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.stencilState">
            <summary>The current stencil state.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.StencilState">
            <summary>Sets the <see cref="T:TrippyGL.StencilState"/> used for drawing.</summary>
            <remarks>
            Getting this property returns a cloned object. Modifying that object
            doesn't automatically apply changes to this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.StencilTestingEnabled">
            <summary>Enables or disables stencil testing.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.ClearStencil">
            <summary>The stencil value to set on a clear stencil operation.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetStencilStates">
            <summary>
            Sets all stencil states to the last values known by this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.FaceCullingEnabled">
            <summary>Enables or disables culling polygon faces.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.CullFaceMode">
            <summary>Sets which polygon face to cull when face culling is enabled.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.PolygonFrontFace">
            <summary>Sets which face of a polygon is the front one (Whether front is when vertices are aligned clockwise or counter clockwise).</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetFaceCullingStates">
            <summary>
            Sets all face culling states to the last values known by this <see cref="T:TrippyGL.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.PolygonMode">
            <summary>Gets or sets the mode in which polygons are rasterized.</summary>
        </member>
        <member name="F:TrippyGL.GraphicsDevice.clipDistancesEnabled">
            <summary>An array containing whether each clip distance index is enabled.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.IsClipDistanceEnabled(System.Int32)">
            <summary>
            Gets whether a gl_ClipDistance index is enabled.
            </summary>
            <param name="index">The index of the clip distance to get.</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.EnableClipDistance(System.Int32)">
            <summary>
            Enables a gl_ClipDistance index.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DisableClipDistance(System.Int32)">
            <summary>
            Disables a gl_ClipDistance index.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.EnableClipDistanceRange(System.Int32,System.Int32)">
            <summary>
            Enables a range of the gl_ClipDistance variables.
            </summary>
            <param name="min">The index of the first clip distance to enable.</param>
            <param name="max">The index of the last clip distance to enable (inclusive).</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DisableClipDistanceRange(System.Int32,System.Int32)">
            <summary>
            Disables a range of the gl_ClipDistance variables.
            </summary>
            <param name="min">The index of the first clip distance to disable.</param>
            <param name="max">The index of the last clip distance to disable (inclusive).</param>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.DisableAllClipDistances">
            <summary>
            Disables all of the gl_ClipDistance variables.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsDevice.ResetClipDistanceStates">
            <summary>
            Resets all clip distance states to the last values this <see cref="T:TrippyGL.GraphicsDevice"/> knows.
            You should only need to call this when interoperating with other libraries or using your own GL functions.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.TextureCubemapSeamlessEnabled">
            <summary>Enables or disables seamless sampling across cubemap faces.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsDevice.RasterizerEnabled">
            <summary>Enables or disables the pixel rasterizer.</summary>
        </member>
        <member name="T:TrippyGL.GLDebugMessageReceivedHandler">
            <summary>
            Represents the method that will handle an OpenGL debug message event.
            </summary>
            <param name="debugSource">Where the message originated from.</param>
            <param name="debugType">The type of message.</param>
            <param name="messageId">An identifier of the message (same messages have same identifiers).</param>
            <param name="debugSeverity">The severity of the message.</param>
            <param name="message">A human-readable text explaining the message.</param>
        </member>
        <member name="T:TrippyGL.GraphicsResource">
            <summary>
            Base class for any graphics resource.
            These include <see cref="T:TrippyGL.Texture"/>, <see cref="T:TrippyGL.BufferObject"/>, <see cref="T:TrippyGL.VertexArray"/>, etc.
            </summary>
        </member>
        <member name="P:TrippyGL.GraphicsResource.GraphicsDevice">
            <summary>The <see cref="T:TrippyGL.GraphicsDevice"/> that manages this <see cref="T:TrippyGL.GraphicsResource"/>.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsResource.GL">
            <summary>Gets this <see cref="T:TrippyGL.GraphicsResource"/>'s GL object.</summary>
        </member>
        <member name="P:TrippyGL.GraphicsResource.IsDisposed">
            <summary>Whether this <see cref="T:TrippyGL.GraphicsResource"/> has been disposed.</summary>
        </member>
        <member name="M:TrippyGL.GraphicsResource.#ctor(TrippyGL.GraphicsDevice)">
            <summary>
            Creates a <see cref="T:TrippyGL.GraphicsResource"/> that uses the specified <see cref="T:TrippyGL.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsResource.Dispose(System.Boolean)">
            <summary>
            Disposes this <see cref="T:TrippyGL.GraphicsResource"/>, deleting and releasing the resources it uses.
            Resources override this method to implement their disposing code.
            </summary>
            <param name="isManualDispose">Whether the call to this function happened because of a call to <see cref="M:TrippyGL.GraphicsResource.Dispose"/> or by the destructor.</param>
        </member>
        <member name="M:TrippyGL.GraphicsResource.DisposeByGraphicsDevice">
            <summary>
            Disposes this <see cref="T:TrippyGL.GraphicsResource"/> without notifying <see cref="P:TrippyGL.GraphicsResource.GraphicsDevice"/>.
            This function is only called by <see cref="P:TrippyGL.GraphicsResource.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.GraphicsResource.Dispose">
            <summary>
            Disposes this <see cref="T:TrippyGL.GraphicsResource"/>. It cannot be used after it's been disposed.
            </summary>
        </member>
        <member name="T:TrippyGL.IndexBufferSubset">
            <summary>
            A <see cref="T:TrippyGL.BufferObjectSubset"/> whose purpose is to store index data.
            </summary>
        </member>
        <member name="P:TrippyGL.IndexBufferSubset.StorageLength">
            <summary>The length of the subset's storage measured in elements.</summary>
        </member>
        <member name="F:TrippyGL.IndexBufferSubset.ElementSize">
            <summary>The size of each element in the subset's storage measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.IndexBufferSubset.ElementType">
            <summary>The type of element this <see cref="T:TrippyGL.IndexBufferSubset"/> stores.</summary>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32,Silk.NET.OpenGL.DrawElementsType)">
            <summary>
            Creates a new <see cref="T:TrippyGL.IndexBufferSubset"/> with the given <see cref="T:TrippyGL.BufferObject"/>
            and specified offset into the buffer, storage length and element type.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="elementType">The type of elements this index subset will use.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.#ctor(TrippyGL.BufferObject,Silk.NET.OpenGL.DrawElementsType)">
            <summary>
            Creates an <see cref="T:TrippyGL.IndexBufferSubset"/> with the given <see cref="T:TrippyGL.BufferObject"/>,
            with the subset covering the entire <see cref="T:TrippyGL.BufferObject"/>'s storage.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="elementType">The type of elements this index subset will use.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32,System.ReadOnlySpan{System.UInt32},System.UInt32)">
            <summary>
            Creates a new <see cref="T:TrippyGL.IndexBufferSubset"/> with the specified offset into the buffer,
             storage length, <see cref="F:Silk.NET.OpenGL.DrawElementsType.UnsignedInt"/> element type and optional initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32,System.ReadOnlySpan{System.UInt16},System.UInt32)">
            <summary>
            Creates a new <see cref="T:TrippyGL.IndexBufferSubset"/> with the specified offset into the buffer,
            storage length, <see cref="F:Silk.NET.OpenGL.DrawElementsType.UnsignedShort"/> element type and initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32,System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Creates a new <see cref="T:TrippyGL.IndexBufferSubset"/> with the specified offset into the buffer,
            storage length, <see cref="F:Silk.NET.OpenGL.DrawElementsType.UnsignedByte"/> element type and initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.SetData(System.ReadOnlySpan{System.UInt32},System.UInt32)">
            <summary>
            Sets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.ReadOnlySpan`1"/> containing the data to set.</param>
            <param name="storageOffset">The offset into the subset's storage to start writing to.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.SetData(System.ReadOnlySpan{System.UInt16},System.UInt32)">
            <summary>
            Sets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.ReadOnlySpan`1"/> containing the data to set.</param>
            <param name="storageOffset">The offset into the subset's storage to start writing to.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.SetData(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Sets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.ReadOnlySpan`1"/> containing the data to set.</param>
            <param name="storageOffset">The offset into the subset's storage to start writing to.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.GetData(System.Span{System.UInt32},System.UInt32)">
            <summary>
            Gets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.Span`1"/> to which the returned data will be written to.</param>
            <param name="storageOffset">The offset into the subset's storage to start reading from.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.GetData(System.Span{System.UInt16},System.UInt32)">
            <summary>
            Gets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.Span`1"/> to which the returned data will be written to.</param>
            <param name="storageOffset">The offset into the subset's storage to start reading from.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.GetData(System.Span{System.Byte},System.UInt32)">
            <summary>
            Gets the data of a specified part of this subset's storage.
            </summary>
            <param name="data">The <see cref="T:System.Span`1"/> to which the returned data will be written to.</param>
            <param name="storageOffset">The offset into the subset's storage to start reading from.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.ResizeSubset(System.UInt32,System.UInt32)">
            <summary>
            Changes the subset location of this <see cref="T:TrippyGL.IndexBufferSubset"/>.
            </summary>
            <param name="storageOffsetBytes">The offset into the buffer object's storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.ValidateCorrectElementType(Silk.NET.OpenGL.DrawElementsType)">
            <summary>
            Checks that this index buffer's <see cref="F:TrippyGL.IndexBufferSubset.ElementType"/> is the specified one and throws an exception if it's not.
            </summary>
            <param name="elementType">The element type to compare.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.ValidateSetParams(System.Int32,System.UInt32)">
            <summary>
            Validates the parameters for a set operation.
            </summary>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.ValidateGetParams(System.Int32,System.UInt32)">
            <summary>
            Validates the parameters for a get operation.
            </summary>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.CalculateRequiredSizeInBytes(Silk.NET.OpenGL.DrawElementsType,System.UInt32)">
            <summary>
            Calculates the required storage length in bytes required for an 
            <see cref="T:TrippyGL.IndexBufferSubset"/> with the specified storage length.
            </summary>
            <param name="elementType">The desired element type for the index buffer.</param>
            <param name="storageLength">The desired length for the subset measured in elements.</param>
        </member>
        <member name="M:TrippyGL.IndexBufferSubset.GetSizeInBytesOfElementType(Silk.NET.OpenGL.DrawElementsType)">
            <summary>
            Gets the size in bytes for one element of the specified type.
            If the provided type isn't GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT or GL_UNSIGNED_INT, this method throws an exception.
            </summary>
            <param name="elementType">The type of element to get size in bytes for.</param>
        </member>
        <member name="T:TrippyGL.IVertex">
            <summary>
            This interface is used by different classes that need vertex specification (such as
            <see cref="T:TrippyGL.VertexBuffer`1"/>, <see cref="T:TrippyGL.VertexArray"/>) to be able to handle vertex specification
            work in a more convenient way.<para/>
            All vertex structs that properly implement this interface can be easily used with these classes.
            </summary>
        </member>
        <member name="P:TrippyGL.IVertex.AttribDescriptionCount">
            <summary>The amount of attribute descriptions this vertex type has.</summary>
        </member>
        <member name="M:TrippyGL.IVertex.WriteAttribDescriptions(System.Span{TrippyGL.VertexAttribDescription})">
            <summary>
            Gets the vertex attrib descriptors by writting them into a <see cref="T:System.Span`1"/>.
            The <see cref="T:System.Span`1"/> must have a length of <see cref="P:TrippyGL.IVertex.AttribDescriptionCount"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.KerningTextureFont">
            <summary>
            A <see cref="T:TrippyGL.TextureFont"/> where characters can have different advance values and kerning.
            </summary>
        </member>
        <member name="F:TrippyGL.KerningTextureFont.kerningOffsets">
            <summary>The kerning offsets for each character. This are in order [from, to].</summary>
        </member>
        <member name="P:TrippyGL.KerningTextureFont.Advances">
            <summary>The advance values for the characters in this font.</summary>
        </member>
        <member name="M:TrippyGL.KerningTextureFont.#ctor(TrippyGL.Texture2D,System.Single,System.Char,System.Char,System.Numerics.Vector2[],System.Drawing.Rectangle[],System.Numerics.Vector2[0:,0:],System.Single[],System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a <see cref="T:TrippyGL.KerningTextureFont"/>.
            </summary>
            <remarks>
            Any array passed to this method will NOT be copied. The provided instance will be used instead.
            Holding on to a reference to these arrays and modifying them afterwards can have unexpected
            behavior.
            </remarks>
        </member>
        <member name="M:TrippyGL.KerningTextureFont.ToKerningless">
            <summary>
            Creates a <see cref="T:TrippyGL.SpacedTextureFont"/> that contains the exact same information
            as this <see cref="T:TrippyGL.KerningTextureFont"/>, except for the kerning.
            </summary>
        </member>
        <member name="T:TrippyGL.MonospaceTextureFont">
            <summary>
            A <see cref="T:TrippyGL.TextureFont"/> where all the characters have the same advance value.
            </summary>
        </member>
        <member name="F:TrippyGL.MonospaceTextureFont.Advance">
            <summary>The advance value for any character in this font.</summary>
        </member>
        <member name="M:TrippyGL.MonospaceTextureFont.#ctor(TrippyGL.Texture2D,System.Single,System.Char,System.Char,System.Numerics.Vector2[],System.Drawing.Rectangle[],System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a <see cref="T:TrippyGL.MonospaceTextureFont"/>.
            </summary>
            <remarks>
            Any array passed to this method will NOT be copied. The provided instance will be used instead.
            Holding on to a reference to these arrays and modifying them afterwards can have unexpected
            behavior.
            </remarks>
        </member>
        <member name="T:TrippyGL.OBJLoader">
            <summary>
            Provides functions to load OBJ files from streams into arrays of vertices.
            </summary>
        </member>
        <member name="F:TrippyGL.OBJLoader.NewlineIndicator">
            <summary>This character indicates the end of the current line.</summary>
        </member>
        <member name="F:TrippyGL.OBJLoader.IndicesSeparator">
            <summary>This character is used to separate different indices when specifying a vertex.</summary>
        </member>
        <member name="F:TrippyGL.OBJLoader.CommentIndicator">
            <summary>This character is used to indicate the start of a comment that goes until the end of the line.</summary>
        </member>
        <member name="F:TrippyGL.OBJLoader.CharBufferLength">
            <summary>The length of a char buffer used to parse numbers.</summary>
        </member>
        <member name="F:TrippyGL.OBJLoader.MaxNumberCharacterLength">
            <summary>
            The maximum allowed length in characters for a number. This will limit the maximum
            size of the char buffer from which numbers are parsed.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.FromFile``1(System.String,TrippyGL.ObjLoadOptions)">
            <summary>
            Loads a 3D model as an array of vertices from an OBJ file.
            </summary>
            <typeparam name="T">The type of vertex to load. This defines which vertex data will and will not be loaded.</typeparam>
            <param name="file">The path to the OBJ file on disk.</param>
            <param name="options">Specifies options that modify how an OBJ file is parsed.</param>
            <returns>An array with the parsed vertex data as a triangle list.</returns>
            <exception cref="T:TrippyGL.ObjLoaderException"/>
        </member>
        <member name="M:TrippyGL.OBJLoader.FromStream``1(System.IO.Stream,TrippyGL.ObjLoadOptions)">
            <summary>
            Loads a 3D model as an array of vertices from an OBJ file.
            </summary>
            <typeparam name="T">The type of vertex to load. This defines which vertex data will and will not be loaded.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the OBJ file will be read from.</param>
            <param name="options">Specifies options that modify how an OBJ file is parsed.</param>
            <returns>An array with the parsed vertex data as a triangle list.</returns>
            <exception cref="T:TrippyGL.ObjLoaderException"/>
        </member>
        <member name="M:TrippyGL.OBJLoader.FromStream``1(System.IO.StreamReader,TrippyGL.ObjLoadOptions)">
            <summary>
            Loads a 3D model as an array of vertices from an OBJ file.
            </summary>
            <typeparam name="T">The type of vertex to load. This defines which vertex data will and will not be loaded.</typeparam>
            <param name="streamReader">The <see cref="T:System.IO.StreamReader"/> from which the OBJ file will be read from.</param>
            <param name="options">Specifies options that modify how an OBJ file is parsed.</param>
            <returns>An array with the parsed vertex data as a triangle list.</returns>
            <exception cref="T:TrippyGL.ObjLoaderException"/>
        </member>
        <member name="M:TrippyGL.OBJLoader.SkipLine(System.IO.StreamReader)">
            <summary>
            Advances the <see cref="T:System.IO.StreamReader"/> until a newline character (or an end of stream) is found.
            The stream's position is left pointing at the first character of the following line.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.SkipWhitespaces(System.IO.StreamReader)">
            <summary>
            Advances the stream's position until the next character to be returned by <see cref="M:System.IO.StreamReader.Read"/>
            is not a whitespace character, but goes no further than the end of the line.
            </summary>
            <returns>Whether the end of the line (or stream) was reached.</returns>
            <remarks>
            In case a newline character is reached, the next char to be returned by
            <see cref="M:System.IO.StreamReader.Read"/> will be a newline character.
            </remarks>
        </member>
        <member name="M:TrippyGL.OBJLoader.SkipWhitespacesNoEOL(System.IO.StreamReader)">
            <summary>
            Advances the stream's position until the next character to be returned by <see cref="M:System.IO.StreamReader.Read"/>
            is not a whitespace character. If an end of line is reached, an exception is thrown.
            </summary>
            <exception cref="T:System.IO.InvalidDataException"/>
        </member>
        <member name="M:TrippyGL.OBJLoader.SkipUntilWhitespace(System.IO.StreamReader)">
            <summary>
            Advances the stream's position until the next character to be returned by <see cref="M:System.IO.StreamReader.Read"/>
            is a whitespace character, or the end of the stream is reached.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.ReadNextFloat(System.IO.StreamReader,System.Span{System.Char}@)">
            <summary>
            Parses a float separated by whitespaces from the <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <remarks>
            The <see cref="T:System.IO.StreamReader"/>'s position is left so that the last character read
            was the last digit of the float, so the next <see cref="M:System.IO.StreamReader.Read"/> there will
            either be a newline character or an end of stream.
            </remarks>
            <param name="streamReader">The <see cref="T:System.IO.StreamReader"/> to read a float from.</param>
            <param name="charBuffer">The buffer to use to store the characters for parsing.</param>
            <returns>The parsed float.</returns>
        </member>
        <member name="M:TrippyGL.OBJLoader.ReadThreeIntegers(System.IO.StreamReader,System.Span{System.Char}@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Parses a group of three integers in between whitespaces, with each integer separated by
            <see cref="F:TrippyGL.OBJLoader.IndicesSeparator"/> characters. Missing values will be set to -1.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.TryReadThreeIntegers(System.IO.StreamReader,System.Span{System.Char}@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Parses a group of three integers in between whitespaces, with each integer separated by
            <see cref="F:TrippyGL.OBJLoader.IndicesSeparator"/> characters. Missing values will be set to -1.
            </summary>
            <returns>True if integers were found, or false if the end of line was found.</returns>
        </member>
        <member name="M:TrippyGL.OBJLoader.ParseNextInt(System.IO.StreamReader,System.Span{System.Char}@,System.Int32@)">
            <summary>
            Parses a single int from the group of three. The parsed integer is set to the value param
            and the function. Empty strings will be turned into the integer -1.
            </summary>
            <returns>Whether the end of the line/stream was reached.</returns>
        </member>
        <member name="M:TrippyGL.OBJLoader.ExpandCharBuffer(System.Span{System.Char}@)">
            <summary>
            Expands the size of a char <see cref="T:System.Span`1"/> by allocating a larger char[]
            and copying all the data over to the new buffer.
            </summary>
            <param name="charBuffer">The buffer to expand.</param>
        </member>
        <member name="M:TrippyGL.OBJLoader.GetLists(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Numerics.Vector3}@,System.Collections.Generic.List{System.Numerics.Vector3}@,System.Collections.Generic.List{TrippyGL.Color4b}@,System.Collections.Generic.List{System.Numerics.Vector2}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Gets the requested lists. If there are previous list instances that can be reused, those are
            returned. Otherwise, new lists are created where necessary.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.ReturnLists(System.Collections.Generic.List{System.Numerics.Vector3},System.Collections.Generic.List{System.Numerics.Vector3},System.Collections.Generic.List{TrippyGL.Color4b},System.Collections.Generic.List{System.Numerics.Vector2},System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns the given lists so they can be reused.
            </summary>
        </member>
        <member name="M:TrippyGL.OBJLoader.MeasureModel``1(System.ReadOnlySpan{``0},System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Calculates the bounds that contain a list of vertices.
            </summary>
            <typeparam name="T">The type of vertex. The first 12 bytes of this struct should be the X, Y and Z floats.</typeparam>
            <param name="vertices">The vertices of which to calculate the bounds.</param>
            <param name="min">The minimum coordinates found in the vertices.</param>
            <param name="max">The maximum coordinates found in the vertices.</param>
            <returns>The size of the model, equal to max-min.</returns>
            <remarks>
            This function will not work properly if the (X, Y, Z) floats aren't in the first 12 bytes of the vertices.
            </remarks>
        </member>
        <member name="T:TrippyGL.ObjLoadOptions">
            <summary>
            Specifies options for loading OBJ files.
            </summary>
        </member>
        <member name="F:TrippyGL.ObjLoadOptions.None">
            <summary>Specifies default options when loading an OBJ file.</summary>
        </member>
        <member name="F:TrippyGL.ObjLoadOptions.TrianglesOnly">
            <summary>Any face with more than 3 vertices is stripped down to just the first 3 vertices.</summary>
        </member>
        <member name="T:TrippyGL.PositionalLight">
            <summary>
            Represents a positional light on a shader and provides functionality
            to change it's diffuse/specular colors and position.
            </summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.positionUniform">
            <summary>The uniform for setting this light's position.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.diffuseColorUniform">
            <summary>The uniform for setting this light's diffuse color.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.specularColorUniform">
            <summary>The uniform for setting this light's specular color.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.attenuationConfigUniform">
            <summary>The uniform for setting this light's attenuation config.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.position">
            <summary>The last known value of this light's position.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.diffuseColor">
            <summary>The last known value of this light's diffuse color.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.specularColor">
            <summary>The last known value of this light's specular color.</summary>
        </member>
        <member name="F:TrippyGL.PositionalLight.attenuationConfig">
            <summary>The last known value of this light's attenuation configuration.</summary>
        </member>
        <member name="P:TrippyGL.PositionalLight.Position">
            <summary>
            Gets or sets this light's position.
            </summary>
        </member>
        <member name="P:TrippyGL.PositionalLight.DiffuseColor">
            <summary>
            Gets or sets this light's diffuse color.
            </summary>
        </member>
        <member name="P:TrippyGL.PositionalLight.SpecularColor">
            <summary>
            Gets or sets this light's specular color.
            </summary>
        </member>
        <member name="P:TrippyGL.PositionalLight.AttenuationConfig">
            <summary>
            Gets or sets this light's configuration for how to attenuate intensity over distance.
            </summary>
            <remarks>
            The formula for attenuation with this <see cref="T:System.Numerics.Vector3"/> (x, y, z) is as follows:
            <code>Attenuation = 1.0 / (x + y*distance + z*distance*distance);</code>
            Therefore, setting this to (1, 0, 0) means there will be no attenuation over distance.
            </remarks>
        </member>
        <member name="M:TrippyGL.PositionalLight.#ctor(TrippyGL.ShaderUniform,TrippyGL.ShaderUniform,TrippyGL.ShaderUniform,TrippyGL.ShaderUniform)">
            <summary>
            Creates a <see cref="T:TrippyGL.PositionalLight"/> with the specified <see cref="T:TrippyGL.ShaderUniform"/>-s.
            </summary>
            <param name="positionUniform">The uniform for setting this light's position. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
            <param name="diffuseColorUniform">The uniform for setting this light's diffuse color. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
            <param name="specularColorUniform">The uniform for setting this light's specular color. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
            <param name="attenuationConfigUniform">The uniform for setting this light's attenuation config. Must be of type <see cref="F:Silk.NET.OpenGL.UniformType.FloatVec3"/>.</param>
        </member>
        <member name="T:TrippyGL.PrimitiveBatcher`1">
            <summary>
            Batches primitives, both triangles and lines.
            The batcher works for both lines and triangles, just beware that both types are batched independently.
            The result of the batcher is always triangle/line list (GL_TRIANGLES or GL_LINES).
            </summary>
            <typeparam name="T">The type of vertex to batch.</typeparam>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.TriangleVertices">
            <summary>
            Gets a <see cref="T:System.Span`1"/> with the batched triangle vertices. If <see cref="P:TrippyGL.PrimitiveBatcher`1.TriangleVertexCapacity"/>
            changes after getting this <see cref="T:System.Span`1"/>, that <see cref="T:System.Span`1"/> will point to old data.
            </summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.LineVertices">
            <summary>
            Gets a <see cref="T:System.Span`1"/> with the batched line vertices. If <see cref="P:TrippyGL.PrimitiveBatcher`1.LineVertexCapacity"/>
            changes after getting this <see cref="T:System.Span`1"/>, that <see cref="T:System.Span`1"/> will point to old data.
            </summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.TriangleVertexCount">
            <summary>Gets the amount of triangle vertices currently stored by the primitive batcher.</summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.LineVertexCount">
            <summary>Gets the amount of line vertices currently stored by the primitive batcher.</summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.TriangleCount">
            <summary>Gets the amount of triangles currently stored by the primitive batcher.</summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.LineCount">
            <summary>Gets the amount of lines currently stored by the primitive batcher.</summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.TriangleVertexCapacity">
            <summary>The amount of triangle vertices the primitive batcher can currently hold.</summary>
        </member>
        <member name="P:TrippyGL.PrimitiveBatcher`1.LineVertexCapacity">
            <summary>The amount of line vertices the primitive batcher can currently hold.</summary>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TrippyGL.PrimitiveBatcher`1"/> with the specified initial capacities.
            </summary>
            <param name="initialTriangleCount">The initial capacity for triangles, in vertex. A negative or 0 value means you don't want to use triangles.</param>
            <param name="initialLineCount">The initial capacity for lines, in vertex. A negative or 0 value means you don't want to use lines.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.#ctor">
            <summary>
            Creates a <see cref="T:TrippyGL.PrimitiveBatcher`1"/> with the default capacities for both arrays.
            </summary>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddTriangle(`0@,`0@,`0@)">
            <summary>
            Adds a single triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddTriangles(System.ReadOnlySpan{`0})">
            <summary>
            Adds a list of triangles. If the amount of vertices isn't a multiple of 3, then the last vertices will be dropped to make it so.
            </summary>
            <param name="vertices">The list of triangles as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddTriangleStrip(System.ReadOnlySpan{`0})">
            <summary>
            Adds a strip of triangles.
            </summary>
            <param name="vertices">The strip of triangles as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddTriangleFan(System.ReadOnlySpan{`0})">
            <summary>
            Adds a fan of triangles.
            </summary>
            <param name="vertex">The triangle fan as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddQuad(`0@,`0@,`0@,`0@)">
            <summary>
            Adds a single quad as two triangles.
            </summary>
            <param name="v1">The first vertex of the quad.</param>
            <param name="v2">The second vertex of the quad.</param>
            <param name="v3">The third vertex of the quad.</param>
            <param name="v4">The fourth vertex of the quad.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddQuads(System.ReadOnlySpan{`0})">
            <summary>
            Adds a list of quads that will be each converted into two triangles. If the amount of vertices isn't a
            multiple of 4, then the last vertices will be dropped to make it so.
            </summary>
            <param name="vertex">The vertices of the quads.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddLine(`0@,`0@)">
            <summary>
            Adds a single line.
            </summary>
            <param name="v1">The first vertex of the line.</param>
            <param name="v2">The second vertex of the line.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddLines(System.ReadOnlySpan{`0})">
            <summary>
            Adds a list of lines. If the amount of vertices isn't a multiple of 2, then the last vertex is dropped to make it so.
            </summary>
            <param name="vertices">The list of lines as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddLineStrip(System.ReadOnlySpan{`0})">
            <summary>
            Adds a strip of lines.
            </summary>
            <param name="vertices">The strip of lines as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.AddLineLoop(System.ReadOnlySpan{`0})">
            <summary>
            Adds a loop of lines.
            </summary>
            <param name="vertices">The loop of lines as vertices.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.EnsureTriangleSpace(System.Int32,System.Boolean)">
            <summary>
            Ensures the primitive batcher has enough space for a specified amount of triangle vertices.
            If there isn't enough space, the list will be expanded exponentially.
            </summary>
            <param name="requiredVertexCount">The minimum amount of triangle vertices required.</param>
            <param name="copyOldData">Whether to copy the old array data to the new array.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.EnsureLineSpace(System.Int32,System.Boolean)">
            <summary>
            Ensures the primitive batcher has enough space for a specified amount of line vertices.
            If there isn't enough space, the list will be expanded exponentially.
            </summary>
            <param name="requiredVertexCount">The minimum amount of lines vertices required.</param>
            <param name="copyOldData">Whether to copy the old array data to the new array.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.ResizeTriangles(System.Int32,System.Boolean)">
            <summary>
            Resizes the triangles array to the new specified length (which is assumed to be higher than the old length).
            </summary>
            <param name="newLength">The new triangles array length. Assumed to be greater than <see cref="P:TrippyGL.PrimitiveBatcher`1.TriangleVertexCapacity"/>.</param>
            <param name="copyOldData">Whether to copy the old array data to the new array.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.ResizeLines(System.Int32,System.Boolean)">
            <summary>
            Resizes the lines array to the new specified length (which is a ssumed to be higher than the old length).
            </summary>
            <param name="newLength">The new lines array length. Assumed to be greater than <see cref="P:TrippyGL.PrimitiveBatcher`1.LineVertexCapacity"/>.</param>
            <param name="copyOldData">Whether to copy the old array data to the new array.</param>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.TrimTriangles">
            <summary>
            Resizes the triangles array to make it hold exactly the current amount of triangle vertices.
            </summary>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.TrimLines">
            <summary>
            Resizes the lines array to make it hold exactly the current amount of line vertices.
            </summary>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.ClearTriangles">
            <summary>
            Clears the list of triangles, resetting it to 0 triangles.
            </summary>
        </member>
        <member name="M:TrippyGL.PrimitiveBatcher`1.ClearLines">
            <summary>
            Clears the list of lines, resetting it to 0 lines.
            </summary>
        </member>
        <member name="T:TrippyGL.RenderbufferObject">
            <summary>
            A buffer optimized to be rendered to. The only way to use a <see cref="T:TrippyGL.RenderbufferObject"/>
            is to attach it to a <see cref="T:TrippyGL.FramebufferObject"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.RenderbufferObject.Handle">
            <summary>The handle for the GL Renderbuffer Object.</summary>
        </member>
        <member name="F:TrippyGL.RenderbufferObject.Width">
            <summary>The width of this <see cref="T:TrippyGL.RenderbufferObject"/>.</summary>
        </member>
        <member name="F:TrippyGL.RenderbufferObject.Height">
            <summary>The height of this <see cref="T:TrippyGL.RenderbufferObject"/>.</summary>
        </member>
        <member name="F:TrippyGL.RenderbufferObject.Samples">
            <summary>The amount of samples this <see cref="T:TrippyGL.RenderbufferObject"/> has.</summary>
        </member>
        <member name="F:TrippyGL.RenderbufferObject.Format">
            <summary>The format for this <see cref="T:TrippyGL.RenderbufferObject"/>.</summary>
        </member>
        <member name="P:TrippyGL.RenderbufferObject.IsDepthOnly">
            <summary>Gets whether the format of this <see cref="T:TrippyGL.RenderbufferObject"/> is depth-only.</summary>
        </member>
        <member name="P:TrippyGL.RenderbufferObject.IsStencilOnly">
            <summary>Gets whether the format of this <see cref="T:TrippyGL.RenderbufferObject"/> is stencil-only.</summary>
        </member>
        <member name="P:TrippyGL.RenderbufferObject.IsDepthStencil">
            <summary>Gets whether the format of this <see cref="T:TrippyGL.RenderbufferObject"/> is depth-stencil.</summary>
        </member>
        <member name="P:TrippyGL.RenderbufferObject.IsColorRenderableFormat">
            <summary>Gets whether the format of this <see cref="T:TrippyGL.RenderbufferObject"/> is color-renderable.</summary>
        </member>
        <member name="M:TrippyGL.RenderbufferObject.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32,TrippyGL.RenderbufferFormat,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.RenderbufferObject"/> with the specified format.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="width">The width for the <see cref="T:TrippyGL.RenderbufferObject"/>.</param>
            <param name="height">The height for the <see cref="T:TrippyGL.RenderbufferObject"/>.</param>
            <param name="format">The format for the <see cref="T:TrippyGL.RenderbufferObject"/>'s storage.</param>
            <param name="samples">The amount of samples the <see cref="T:TrippyGL.RenderbufferObject"/> will have.</param>
        </member>
        <member name="T:TrippyGL.ShaderBlockUniform">
            <summary>
            A buffer-backed block of uniforms. That is, a block of uniforms that get their value from a <see cref="T:TrippyGL.BufferObject"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniform.Name">
            <summary>The name with which this <see cref="T:TrippyGL.ShaderBlockUniform"/> is declared in the shader.</summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniform.OwnerProgram">
            <summary>The <see cref="T:TrippyGL.ShaderProgram"/> that owns this uniform.</summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniform.BindingIndex">
            <summary>The binding index in the uniform buffer target from which this uniform reads buffer data.</summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniform.ActiveUniformCount">
            <summary>The amount of active uniforms this uniform block contains.</summary>
        </member>
        <member name="M:TrippyGL.ShaderBlockUniform.SetValue(TrippyGL.UniformBufferSubset,System.UInt32)">
            <summary>
            Sets the buffer containing the values for this uniform.
            </summary>
            <param name="buffer">The buffer from which the values will be read.</param>
            <param name="elementIndex">The index of the element in the buffer subset whose value should be used.</param>
        </member>
        <member name="M:TrippyGL.ShaderBlockUniform.ApplyUniformValue">
            <summary>
            This is called by <see cref="M:TrippyGL.ShaderBlockUniformList.EnsureBufferBindingsSet"/> to ensure the buffer backing
            this uniform block is bound to the right index and range on the uniform buffer target.
            </summary>
        </member>
        <member name="T:TrippyGL.ShaderBlockUniformList">
            <summary>
            A list of <see cref="T:TrippyGL.ShaderBlockUniform"/>-s belonging to a <see cref="T:TrippyGL.ShaderProgram"/>.
            This class also does some controlling over these uniform blocks to make everything run nicely.
            </summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniformList.Program">
            <summary>The <see cref="T:TrippyGL.ShaderProgram"/> the uniform blocks belong to.</summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniformList.uniforms">
            <summary>All of the block uniforms in the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderBlockUniformList.Item(System.String)">
            <summary>
            Gets a <see cref="T:TrippyGL.ShaderBlockUniform"/> by name. If there's no such name, returns null.
            </summary>
            <param name="name">The name (declared in the shaders) of the <see cref="T:TrippyGL.ShaderBlockUniform"/> to get.</param>
        </member>
        <member name="P:TrippyGL.ShaderBlockUniformList.Count">
            <summary>The amount of <see cref="T:TrippyGL.ShaderBlockUniform"/> in the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderBlockUniformList.TotalUniformCount">
            <summary>The total amount of uniforms from all the block. If a block has two values, these count as two uniforms.</summary>
        </member>
        <member name="M:TrippyGL.ShaderBlockUniformList.#ctor(TrippyGL.ShaderProgram)">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderBlockUniformList"/> and queries the uniforms for a given <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderBlockUniformList.EnsureBufferBindingsSet">
            <summary>
            Ensures the buffer bindings for the uniform blocks are correctly set for a drawing operation.
            This is called by <see cref="M:TrippyGL.ShaderProgram.EnsurePreDrawStates"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderBlockUniformList.GetUniformByName(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a <see cref="T:TrippyGL.ShaderBlockUniform"/> by name. If there's no such name, returns null.
            </summary>
            <param name="name">The name (as declared in the shaders) of the <see cref="T:TrippyGL.ShaderBlockUniform"/> to get.</param>
        </member>
        <member name="T:TrippyGL.ShaderProgram">
            <summary>
            Encapsulates an OpenGL program object for using shaders.
            Shaders define how things are processed in the graphics pipeline,
            from calculating vertex positions to choosing the color of each fragment.
            </summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.Handle">
            <summary>The handle for the OpenGL Program object.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.GeometryShader">
            <summary>Gets data about the geometry shader in this <see cref="T:TrippyGL.ShaderProgram"/>, if there is one.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.Uniforms">
            <summary>The list of uniforms in this <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.BlockUniforms">
            <summary>The list of block uniforms in this <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.activeAttribs">
            <summary>The vertex attributes for this <see cref="T:TrippyGL.ShaderProgram"/> queried from OpenGL.</summary>
        </member>
        <member name="P:TrippyGL.ShaderProgram.ActiveAttribs">
            <summary>Gets the input attributes on this program.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.HasVertexShader">
            <summary>Whether this <see cref="T:TrippyGL.ShaderProgram"/> has a vertex shader attached.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.HasGeometryShader">
            <summary>Whether this <see cref="T:TrippyGL.ShaderProgram"/> has a geometry shader attached.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.HasFragmentShader">
            <summary>Whether this <see cref="T:TrippyGL.ShaderProgram"/> has a fragment shader attached.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgram.areSamplerUniformsDirty">
            <summary>
            Used internally. When a sampler-type <see cref="T:TrippyGL.ShaderUniform"/> is modified, this value
            is set to true. The value is then used on <see cref="M:TrippyGL.ShaderUniformList.EnsureSamplerUniformsSet"/>
            to know whether the textures need to be bound and set
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderProgram.#ctor(TrippyGL.GraphicsDevice,System.UInt32,TrippyGL.ActiveVertexAttrib[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderProgram"/> from an already compiled GL Program Object.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="programHandle">The GL Program Object's handle.</param>
            <param name="activeAttribs">The active attributes, already queried from the program.</param>
            <remarks>The active attributes must have already been checked to be valid.</remarks>
        </member>
        <member name="M:TrippyGL.ShaderProgram.EnsureInUse">
            <summary>
            Ensures this program is the one currently in use for it's <see cref="T:TrippyGL.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderProgram.EnsurePreDrawStates">
            <summary>
            Ensures all necessary states are set for a draw command to use this program,
            such as making sure sampler or block uniforms are properly set.<para/>
            This should always be called before a draw operation and assumes this
            <see cref="T:TrippyGL.ShaderProgram"/> is the one currently in use.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderProgram.TryFindAttributeByLocation(System.Int32,TrippyGL.ActiveVertexAttrib@)">
            <summary>
            Tries to find an <see cref="T:TrippyGL.ActiveVertexAttrib"/> in this <see cref="T:TrippyGL.ShaderProgram"/> with
            the specified location.
            </summary>
            <param name="location">The location to look for an <see cref="T:TrippyGL.ActiveVertexAttrib"/> at.</param>
            <param name="attrib">The <see cref="T:TrippyGL.ActiveVertexAttrib"/> that was found, if one was found.</param>
            <returns>Whether an attribute was found in said location.</returns>
        </member>
        <member name="M:TrippyGL.ShaderProgram.FromCode``1(TrippyGL.GraphicsDevice,System.String,System.String,System.String[])">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderProgram"/> by compiling the given strings as code.
            </summary>
            <typeparam name="T">The type of vertex to configure the input of the <see cref="T:TrippyGL.ShaderProgram"/> for.</typeparam>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.ShaderProgram"/> will use.</param>
            <param name="vsCode">The vertex shader code for the <see cref="T:TrippyGL.ShaderProgram"/>.</param>
            <param name="fsCode">The fragment shader code for the <see cref="T:TrippyGL.ShaderProgram"/>.</param>
            <param name="attribNames">The names of the attributes ordered by attribute index.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgram.FromFiles``1(TrippyGL.GraphicsDevice,System.String,System.String,System.String[])">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderProgram"/> by compiling the contents of the specified files as code.
            </summary>
            <typeparam name="T">The type of vertex to configure the input of the <see cref="T:TrippyGL.ShaderProgram"/> for.</typeparam>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.ShaderProgram"/> will use.</param>
            <param name="vsFile">The path to the file containing the vertex shader code.</param>
            <param name="fsFile">The path to the file containing the fragment shader code.</param>
            <param name="attribNames">The names of the attributes ordered by attribute index.</param>
        </member>
        <member name="T:TrippyGL.ShaderProgramBuilder">
            <summary>
            Used to construct <see cref="T:TrippyGL.ShaderProgram"/> instances with the desired parameters.
            </summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.VertexShaderCode">
            <summary>The vertex shader code for the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderProgramBuilder.HasVertexShader">
            <summary>Whether <see cref="F:TrippyGL.ShaderProgramBuilder.VertexShaderCode"/> is not null or white spaces.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.GeometryShaderCode">
            <summary>The geometry shader code for the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderProgramBuilder.HasGeometryShader">
            <summary>Whether <see cref="F:TrippyGL.ShaderProgramBuilder.GeometryShaderCode"/> is not null or white spaces.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.FragmentShaderCode">
            <summary>The fragment shader code for the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderProgramBuilder.HasFragmentShader">
            <summary>Whether <see cref="F:TrippyGL.ShaderProgramBuilder.FragmentShaderCode"/> is not null or white spaces.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.specifiedAttribs">
            <summary>The specified attributes ordered by attribute index.</summary>
        </member>
        <member name="P:TrippyGL.ShaderProgramBuilder.HasAttribsSpecified">
            <summary>Whether vertex attributes have been specified to this <see cref="T:TrippyGL.ShaderProgramBuilder"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.VertexShaderLog">
            <summary>The vertex shader log of the last <see cref="T:TrippyGL.ShaderProgram"/> this builder created.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.GeometryShaderLog">
            <summary>The geometry shader log of the last <see cref="T:TrippyGL.ShaderProgram"/> this builder created.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.FragmentShaderLog">
            <summary>The fragment shader log of the last <see cref="T:TrippyGL.ShaderProgram"/> this builder created.</summary>
        </member>
        <member name="F:TrippyGL.ShaderProgramBuilder.ProgramLog">
            <summary>The program log of the last <see cref="T:TrippyGL.ShaderProgram"/> this builder created.</summary>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.SpecifyVertexAttribs(System.ReadOnlySpan{TrippyGL.SpecifiedShaderAttrib})">
            <summary>
            Specifies the vertex attributes for the <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
            <param name="attributes">The vertex attributes in order of index.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.SpecifyVertexAttribs(System.ReadOnlySpan{TrippyGL.VertexAttribDescription},System.ReadOnlySpan{System.String})">
            <summary>
            Specifies the vertex attributes for the <see cref="T:TrippyGL.ShaderProgram"/>
            </summary>
            <param name="attribs">The vertex attributes in order of index.</param>
            <param name="attribNames">The names of the attributes orderd by attribute index.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.SpecifyVertexAttribs(System.ReadOnlySpan{TrippyGL.VertexAttribSource},System.ReadOnlySpan{System.String})">
            <summary>
            Specifies the vertex attributes for the <see cref="T:TrippyGL.ShaderProgram"/>
            </summary>
            <param name="attribs">The vertex attributes in order of index.</param>
            <param name="attribNames">The names of the attributes orderd by attribute index.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.SpecifyVertexAttribs``1(System.ReadOnlySpan{System.String})">
            <summary>
            Specifies the vertex attributes for the <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
            <typeparam name="T">The type of vertex to use.</typeparam>
            <param name="attribNames">The names of the attributes orderd by attribute index.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.CreateInternal(TrippyGL.GraphicsDevice,TrippyGL.ActiveVertexAttrib[]@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            Compiles shaders using the code from the different XShaderCode fields and creates a
            GL Program Object by linking them together. Then, queries the active attributes and
            ensures they match the provided ones in <see cref="F:TrippyGL.ShaderProgramBuilder.specifiedAttribs"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.ShaderProgram"/> will use.</param>
            <param name="activeAttribs">The active attributes found by querying the linked program.</param>
            <param name="getLogs">Whether to get compilation and linking logs from the shaders and program.</param>
            <returns>The handle of the newly created GL Program Object.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:TrippyGL.ShaderCompilationException"/>
            <exception cref="T:TrippyGL.ProgramLinkException"/>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.Create(TrippyGL.GraphicsDevice,System.Boolean)">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderProgram"/> using the current values on this <see cref="T:TrippyGL.ShaderProgramBuilder"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.ShaderProgram"/> will use.</param>
            <param name="getLogs">Whether to get compilation and linking logs from the shaders and program.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.CreateActiveAttribArray(TrippyGL.GraphicsDevice,System.UInt32)">
            <summary>
            Queries vertex attribute data from a compiled shader program and returns an
            array with all the resulting <see cref="T:TrippyGL.ActiveVertexAttrib"/>-s.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> to use for gl calls.</param>
            <param name="programHandle">The gl handle of the shader program to query attribs for.</param>
        </member>
        <member name="M:TrippyGL.ShaderProgramBuilder.DoVertexAttributesMatch(System.ReadOnlySpan{TrippyGL.ActiveVertexAttrib},System.ReadOnlySpan{TrippyGL.SpecifiedShaderAttrib})">
            <summary>
            Checks that the names given for some vertex attributes match the names actually found for the vertex attributes.
            </summary>
            <param name="activeAttribs">The active <see cref="T:TrippyGL.ActiveVertexAttrib"/>-s found by querying them from OpenGL, sorted by location.</param>
            <param name="specifiedAttribs">The attributes that were provided by the user of the library.</param>
        </member>
        <member name="T:TrippyGL.ShaderUniform">
            <summary>
            Represents a shader uniform from a <see cref="T:TrippyGL.ShaderProgram"/> and allows control over that uniform.
            </summary>
        </member>
        <member name="P:TrippyGL.ShaderUniform.Empty">
            <summary>Gets an empty <see cref="T:TrippyGL.ShaderUniform"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderUniform.IsEmpty">
            <summary>Whether this <see cref="T:TrippyGL.ShaderUniform"/> has null values.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.Name">
            <summary>The name with which this uniform is declared on the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.UniformType">
            <summary>The type of this uniform.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.OwnerProgram">
            <summary>The <see cref="T:TrippyGL.ShaderProgram"/> that contains this uniform.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.UniformLocation">
            <summary>The location of the uniform on the <see cref="T:TrippyGL.ShaderProgram"/>. Used for setting the value.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.Size">
            <summary>For array uniforms, this is the length of the array. 1 for non-array uniforms.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.IsSamplerType">
            <summary>Whether this <see cref="T:TrippyGL.ShaderUniform"/> is of a sampler or sampler-array type.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.textureValues">
            <summary>For sampler uniforms, the <see cref="T:TrippyGL.Texture"/>/s the user set to this <see cref="T:TrippyGL.ShaderUniform"/>.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniform.textureLastAppliedUnits">
            <summary>For sampler uniforms, the texture units last set as the uniform's value/s.</summary>
        </member>
        <member name="P:TrippyGL.ShaderUniform.Textures">
            <summary>
            Provides direct read-only access to this <see cref="T:TrippyGL.ShaderUniform"/>'s set textures.
            These are not bound to the <see cref="T:TrippyGL.GraphicsDevice"/> until needed.<para/>
            If this <see cref="T:TrippyGL.ShaderUniform"/> is not of sampler type, accesing this will fail.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderUniform.ApplyUniformTextureValues">
            <summary>
            This is called by <see cref="M:TrippyGL.ShaderUniformList.EnsureSamplerUniformsSet"/> after all
            the required sampler uniform textures have been bound to different texture units.<para/>
            This method assumes that the <see cref="F:TrippyGL.ShaderUniform.textureValues"/> textures are all bound to
            texture units and ready to be used. This method also assumes that the
            <see cref="T:TrippyGL.ShaderProgram"/> that owns this uniform is the one currently in use.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderUniform.ValidateUniformType(Silk.NET.OpenGL.UniformType)">
            <summary>
            Checks that <see cref="F:TrippyGL.ShaderUniform.UniformType"/> is the correct type and throws an exception otherwise.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderUniform.ValidateArrayAndType(Silk.NET.OpenGL.UniformType,System.Int32)">
            <summary>
            Checks that <see cref="F:TrippyGL.ShaderUniform.UniformType"/> is the correct type and valueLength is less
            than <see cref="F:TrippyGL.ShaderUniform.Size"/>, and throws an exception otherwise.
            </summary>
        </member>
        <member name="T:TrippyGL.ShaderUniformList">
            <summary>
            A list of <see cref="T:TrippyGL.ShaderUniform"/> belonging to a <see cref="T:TrippyGL.ShaderProgram"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.ShaderUniformList.IsEmpty">
            <summary>Whether this <see cref="T:TrippyGL.ShaderUniformList"/> has null values.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniformList.Program">
            <summary>The <see cref="T:TrippyGL.ShaderProgram"/> the uniforms belong to.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniformList.uniforms">
            <summary>All of the (non-block) uniforms from the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderUniformList.Count">
            <summary>The amount of <see cref="T:TrippyGL.ShaderUniform"/>-s in the <see cref="T:TrippyGL.ShaderProgram"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderUniformList.Uniforms">
            <summary>Gets the unsorted <see cref="T:TrippyGL.ShaderUniform"/>-s from this list.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniformList.textureList">
            <summary>A not-always-correct list with all the textures currently applied to the sampler uniforms.</summary>
        </member>
        <member name="F:TrippyGL.ShaderUniformList.hasSamplerUniforms">
            <summary>Whether this list contains at least one sampler-type (or sampler-array-type) <see cref="T:TrippyGL.ShaderUniform"/>.</summary>
        </member>
        <member name="P:TrippyGL.ShaderUniformList.Item(System.String)">
            <summary>
            Gets a <see cref="T:TrippyGL.ShaderUniform"/> by name. If there's no such name, returns an empty <see cref="T:TrippyGL.ShaderUniform"/>.
            </summary>
            <param name="name">The name (as declared in the shaders) of the <see cref="T:TrippyGL.ShaderUniform"/> to get.</param>
        </member>
        <member name="M:TrippyGL.ShaderUniformList.EnsureSamplerUniformsSet">
            <summary>
            When using sampler uniforms, this will make sure they all work together properly. This is called
            by <see cref="M:TrippyGL.ShaderProgram.EnsurePreDrawStates"/> after the program is ensured to be in use.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderUniformList.RemakeTextureList">
            <summary>
            Recreates the <see cref="F:TrippyGL.ShaderUniformList.textureList"/> list. This is, clears it and then adds all the
            sampler uniform's texture values avoiding duplicates, then marks the list as not dirty.
            </summary>
        </member>
        <member name="M:TrippyGL.ShaderUniformList.GetUniformByName(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a <see cref="T:TrippyGL.ShaderUniform"/> by name. If there's no such name, returns an empty <see cref="T:TrippyGL.ShaderUniform"/>.
            </summary>
            <param name="name">The name (as declared in the shaders) of the <see cref="T:TrippyGL.ShaderUniform"/> to get.</param>
        </member>
        <member name="M:TrippyGL.ShaderUniformList.CreateForProgram(TrippyGL.ShaderProgram)">
            <summary>
            Creates a <see cref="T:TrippyGL.ShaderUniformList"/> and queries the uniforms for a given <see cref="T:TrippyGL.ShaderProgram"/>.<para/>
            The <see cref="T:TrippyGL.ShaderProgram"/> must already have had it's block uniforms queried prior to this.
            If there are no uniforms, this method returns null.
            </summary>
        </member>
        <member name="T:TrippyGL.SimpleShaderProgram">
            <summary>
            A simple, configurable <see cref="T:TrippyGL.ShaderProgram"/> that provides basic functionality
            without having to write any GLSL code.
            </summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgram.VertexColorsEnabled">
            <summary>Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> uses vertex colors.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgram.TextureEnabled">
            <summary>Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> uses vertex texture coordinates.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgram.LightningEnabled">
            <summary>Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> uses vertex normals.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgram.HasWorldUniform">
            <summary>Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> includes a World matrix in the vertex shader.</summary>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.World">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s World matrix.
            </summary>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.View">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s View matrix.
            </summary>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.Projection">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s Projection matrix.
            </summary>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.Color">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s default color.
            </summary>
            <remarks>
            This color multiplies the output of the fragment shader.
            </remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.Texture">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <remarks>
            If enabled, the <see cref="T:TrippyGL.SimpleShaderProgram"/> will sample this <see cref="T:TrippyGL.Texture2D"/>
            using the coordinates in the vertices as part of the output color calculation.
            </remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.Reflectivity">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s material reflectivity parameter.
            </summary>
            <remarks>This only works when lightning is enabled.</remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.SpecularPower">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s specular light power parameter.
            </summary>
            <remarks>This only works when lightning is enabled.</remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.AmbientLightColor">
            <summary>
            Gets or sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s ambient lightning color.
            </summary>
            <remarks>This only works when lightning is enabled.</remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.DirectionalLights">
            <summary>
            Gets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s list of directional lights.
            </summary>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgram.PositionalLights">
            <summary>
            Gets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s list of positional lights.
            </summary>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgram.#ctor(TrippyGL.GraphicsDevice,System.UInt32,TrippyGL.ActiveVertexAttrib[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TrippyGL.SimpleShaderProgram"/> from an already compiled GL Program Object.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="programHandle">The GL Program Object's handle.</param>
            <param name="activeAttribs">The active attributes, already queried from the program.</param>
            <param name="vertColorsEnabled">Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> uses vertex colors.</param>
            <param name="textureEnabled">Whether this <see cref="T:TrippyGL.SimpleShaderProgram"/> uses a texture.</param>
            <param name="directionalLightCount">The amount of directional lights on this <see cref="T:TrippyGL.SimpleShaderProgram"/>.</param>
            <param name="positionalLightCount">The amount of positional lights on this <see cref="T:TrippyGL.SimpleShaderProgram"/>.</param>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgram.CreateDirectionalLights(System.Int32)">
            <summary>
            Creates an array of <see cref="T:TrippyGL.DirectionalLight"/>-s for this <see cref="T:TrippyGL.SimpleShaderProgram"/>
            by getting the <see cref="T:TrippyGL.ShaderUniform"/>-s from <see cref="F:TrippyGL.ShaderProgram.Uniforms"/>.
            </summary>
            <param name="directionalLightCount">The amount of directional lights on this <see cref="T:TrippyGL.SimpleShaderProgram"/>.</param>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgram.CreatePositionalLights(System.Int32)">
            <summary>
            Creates an array of <see cref="T:TrippyGL.PositionalLight"/>-s for this <see cref="T:TrippyGL.SimpleShaderProgram"/>
            by getting the <see cref="T:TrippyGL.ShaderUniform"/>-s from <see cref="F:TrippyGL.ShaderProgram.Uniforms"/>.
            </summary>
            <param name="positionalLightCount">The amount of positional lights on this <see cref="T:TrippyGL.SimpleShaderProgram"/>.</param>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgram.SetView(System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Sets this <see cref="T:TrippyGL.SimpleShaderProgram"/>'s View matrix, alongside the camera's position.
            </summary>
            <param name="view">The view matrix.</param>
            <param name="cameraPos">The camera's position in world space.</param>
            <remarks>
            The camera's position is needed for specular lightning calculations. If lightning is disabled,
            this parameter will be ignored.<para/>
            If the camera's position is known, setting the view matrix here is more performant than
            setting it in <see cref="P:TrippyGL.SimpleShaderProgram.View"/> because otherwise the camera's position needs to be
            calculated, and this is done by inversing the view matrix and multiplying that by (0, 0, 0, 1).
            </remarks>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgram.Create``1(TrippyGL.GraphicsDevice,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:TrippyGL.SimpleShaderProgram"/> to use with a specified vertex type.
            </summary>
            <typeparam name="T">The type of vertex the <see cref="T:TrippyGL.SimpleShaderProgram"/> will use.</typeparam>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.SimpleShaderProgram"/> will use.</param>
            <param name="positionalLights">The amount of positional lights to include in the shader.</param>
            <param name="directionalLights">The amount of directional lights to include in the shader.</param>
            <param name="excludeWorldMatrix">Whether to exclude the World matrix from the vertex shader.</param>
            <remarks>
            Texture sampling and vertex colors will be included if the given vertex type has attributes
            to supply these. The first FloatVec4 attribute will be taken as color and the first FloatVec2
            attribute will be taken as texture coordinates.
            </remarks>
        </member>
        <member name="T:TrippyGL.SimpleShaderProgramBuilder">
            <summary>
            Used to construct <see cref="T:TrippyGL.SimpleShaderProgram"/> instances with the desired parameters.
            </summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.GLSLVersionString">
            <summary>The version-profile string for GLSL to use. If null, the current GL version will be used.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.PositionAttributeIndex">
            <summary>The index of the vertex attribute from which the <see cref="T:TrippyGL.SimpleShaderProgram"/> will read vertex positions.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.NormalAttributeIndex">
            <summary>The index of the vertex attribute from which the <see cref="T:TrippyGL.SimpleShaderProgram"/> will read vertex normals.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.ColorAttributeIndex">
            <summary>The index of the vertex attribute from which the <see cref="T:TrippyGL.SimpleShaderProgram"/> will read vertex colors.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.TexCoordsAttributeIndex">
            <summary>The index of the vertex attribute from which the <see cref="T:TrippyGL.SimpleShaderProgram"/> will read vertex texcoords.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.VertexColorsEnabled">
            <summary>Whether the <see cref="T:TrippyGL.SimpleShaderProgram"/> will include vertex colors in the fragment calculation.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.TextureEnabled">
            <summary>
            Whether the <see cref="T:TrippyGL.SimpleShaderProgram"/> will include vertex texcoords
            and sampling from a <see cref="T:TrippyGL.Texture2D"/> in the fragment calculation.
            </summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.DirectionalLights">
            <summary>The amount of directional lights to include in the <see cref="T:TrippyGL.SimpleShaderProgram"/>. Zero to disable.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.PositionalLights">
            <summary>The amount of positional lights to include in the <see cref="T:TrippyGL.SimpleShaderProgram"/>. Zero to disable.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.ExcludeWorldMatrix">
            <summary>Whether to exclude the World matrix from the vertex shader.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.DiscardTransparentFragments">
            <summary>Whether to discard fragments considered transparent according to <see cref="F:TrippyGL.SimpleShaderProgramBuilder.TransparentFragmentThreshold"/>.</summary>
            <remarks>Discarding the fragment occurs before lighting calculations.</remarks>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.TransparentFragmentThreshold">
            <summary>The minimum amount of alpha required for the fragment to not be discarded.</summary>
            <remarks>
            This property is ignored unless <see cref="F:TrippyGL.SimpleShaderProgramBuilder.DiscardTransparentFragments"/> is set to true.
            If a fragment has exactly this alpha value, it will NOT be discarded.
            </remarks>
        </member>
        <member name="P:TrippyGL.SimpleShaderProgramBuilder.LightningEnabled">
            <summary>
            Gets whether the current configuration of this <see cref="T:TrippyGL.SimpleShaderProgramBuilder"/>
            will make a created <see cref="T:TrippyGL.SimpleShaderProgram"/> include lighting calculations.
            </summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.VertexShaderLog">
            <summary>The vertex shader log of the last <see cref="T:TrippyGL.SimpleShaderProgram"/> this builder created.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.FragmentShaderLog">
            <summary>The fragment shader log of the last <see cref="T:TrippyGL.SimpleShaderProgram"/> this builder created.</summary>
        </member>
        <member name="F:TrippyGL.SimpleShaderProgramBuilder.ProgramLog">
            <summary>The program log of the last <see cref="T:TrippyGL.SimpleShaderProgram"/> this builder created.</summary>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgramBuilder.ConfigureVertexAttribs``1">
            <summary>
            Automatically sets the configuration of attribute indices.
            </summary>
            <remarks>
            This function loops through a vertex attributes descriptions. The first attribute found
            whose <see cref="F:TrippyGL.VertexAttribDescription.AttribType"/> is <see cref="F:Silk.NET.OpenGL.AttributeType.FloatVec3"/>
            will be used for Position, and the second will be used for Normal.
            The first ocurrance of a <see cref="F:Silk.NET.OpenGL.AttributeType.FloatVec4"/> will be used for Color, and 
            the first ocurrance of a <see cref="F:Silk.NET.OpenGL.AttributeType.FloatVec2"/> will be used for TexCoords.
            Any attribute left unassigned is set to -1.
            </remarks>
            <typeparam name="T">The type of vertex the <see cref="T:TrippyGL.SimpleShaderProgram"/> will use.</typeparam>
        </member>
        <member name="M:TrippyGL.SimpleShaderProgramBuilder.Create(TrippyGL.GraphicsDevice)">
            <summary>
            Creates a <see cref="T:TrippyGL.SimpleShaderProgram"/> using the current values on this
            <see cref="T:TrippyGL.SimpleShaderProgramBuilder"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> the <see cref="T:TrippyGL.SimpleShaderProgram"/> will use.</param>
        </member>
        <member name="T:TrippyGL.SpacedTextureFont">
            <summary>
            A <see cref="T:TrippyGL.TextureFont"/> where characters can have different advance values but no kerning.
            </summary>
        </member>
        <member name="P:TrippyGL.SpacedTextureFont.Advances">
            <summary>The advance values for the characters in this font.</summary>
        </member>
        <member name="M:TrippyGL.SpacedTextureFont.#ctor(TrippyGL.Texture2D,System.Single,System.Char,System.Char,System.Numerics.Vector2[],System.Drawing.Rectangle[],System.Single[],System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a <see cref="T:TrippyGL.SpacedTextureFont"/>.
            </summary>
            <remarks>
            Any array passed to this method will NOT be copied. The provided instance will be used instead.
            Holding on to a reference to these arrays and modifying them afterwards can have unexpected
            behavior.
            </remarks>
        </member>
        <member name="T:TrippyGL.SpecifiedShaderAttrib">
            <summary>
            Used by <see cref="T:TrippyGL.ShaderProgramBuilder"/> for specifying vertex attributes.
            </summary>
        </member>
        <member name="F:TrippyGL.SpecifiedShaderAttrib.AttribType">
            <summary>The shader attribute's type.</summary>
        </member>
        <member name="F:TrippyGL.SpecifiedShaderAttrib.Name">
            <summary>The name with which the shader attribute is declared in the shader.</summary>
        </member>
        <member name="M:TrippyGL.SpecifiedShaderAttrib.#ctor(System.String,Silk.NET.OpenGL.AttributeType)">
            <summary>
            Creates a <see cref="T:TrippyGL.SpecifiedShaderAttrib"/> with the given values.
            </summary>
        </member>
        <member name="M:TrippyGL.SpecifiedShaderAttrib.Matches(TrippyGL.ActiveVertexAttrib@)">
            <summary>
            Whether this <see cref="T:TrippyGL.SpecifiedShaderAttrib"/> and another <see cref="T:TrippyGL.ActiveVertexAttrib"/> have matching data.
            </summary>
        </member>
        <member name="T:TrippyGL.StencilState">
            <summary>
            Stores states used for stencil testing. The stencil testing function can be configured
            to obtain different results.
            </summary>
        </member>
        <member name="F:TrippyGL.StencilState.FullMask">
            <summary>A stencil mask in which all bits are turned on.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.EmptyMask">
            <summary>A stencil mask in which all bits are turned off.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.StencilTestingEnabled">
            <summary>
            Whether stencil testing is enabled for this stencil state.
            If false, all other <see cref="T:TrippyGL.StencilState"/> parameters are irrelevant.
            </summary>
        </member>
        <member name="F:TrippyGL.StencilState.ClearStencil">
            <summary>The stencil value to use when clearing the stencil buffer.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontWriteMask">
            <summary>The mask to apply when writting the stencil buffer from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackWriteMask">
            <summary>The mask to apply when writting the stencil buffer from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontFunction">
            <summary>The function to use on the stencil test from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackFunction">
            <summary>The function to use on the stencil test from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontRefValue">
            <summary>A value to use for comparison during the stencil test from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackRefValue">
            <summary>A value to use for comparison during the stencil test from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontTestMask">
            <summary>The mask to apply before comparison on the stencil test from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackTestMask">
            <summary>The mask to apply before comparison on the stencil test from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontStencilFailOperation">
            <summary>The operation to do when a stencil test fails from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontDepthFailOperation">
            <summary>The operation to do when a depth test fails from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.FrontPassOperation">
            <summary>The operation to do when both the depth and stencil tests pass from the front of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackStencilFailOperation">
            <summary>The operation to do when a stencil test fails from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackDepthFailOperation">
            <summary>The operation to do when a depth test fails from the back of a polygon.</summary>
        </member>
        <member name="F:TrippyGL.StencilState.BackPassOperation">
            <summary>The operation to do when both the depth and stencil tests pass from the back of a polygon.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.WriteMask">
            <summary>Sets the write mask for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.Function">
            <summary>Sets the stencil function for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.RefValue">
            <summary>Sets the ref value for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.TestMask">
            <summary>Sets the test mask value for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.StencilFailOperation">
            <summary>Sets the stencil fail operation for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.DepthFailOperation">
            <summary>Sets the depth fail operation for both front and back.</summary>
        </member>
        <member name="P:TrippyGL.StencilState.PassOperation">
            <summary>Sets the depth and stencil pass operation for both front and back.</summary>
        </member>
        <member name="M:TrippyGL.StencilState.#ctor">
            <summary>
            Creates an empty, zeroed-out <see cref="T:TrippyGL.StencilState"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.StencilState.#ctor(System.Boolean,System.Int32,System.UInt32,Silk.NET.OpenGL.StencilFunction,System.Int32,System.UInt32,Silk.NET.OpenGL.StencilOp,Silk.NET.OpenGL.StencilOp,Silk.NET.OpenGL.StencilOp)">
            <summary>
            Creates a <see cref="T:TrippyGL.StencilState"/> with the specified stencil testing parameters.
            </summary>
            <param name="testingEnabled">Whether stencil testing is enabled.</param>
            <param name="clearStencil">The stencil value to set on a clear operation.</param>
            <param name="writeMask">The mask to apply when writting to the stencil buffer.</param>
            <param name="function">The function to use for comparing stencil values.</param>
            <param name="refValue">A value used for comparison during the stencil test.</param>
            <param name="testMask">A mask applied before comparison during the stencil test.</param>
            <param name="sfail">The operation to do when a stencil test fails.</param>
            <param name="dpfail">The operation to do when a depth test fails.</param>
            <param name="dppass">The operation to do when both the depth and stencil tests pass.</param>
        </member>
        <member name="M:TrippyGL.StencilState.Clone">
            <summary>
            Creates a <see cref="T:TrippyGL.StencilState"/> instance with the same values as this one.
            </summary>
        </member>
        <member name="T:TrippyGL.Texture">
            <summary>
            Encapsulates an OpenGL texture object. This is the base class for all
            texture types and manages some of their internal workings.
            </summary>
        </member>
        <member name="F:TrippyGL.Texture.Handle">
            <summary>The handle for the GL Texture Object.</summary>
        </member>
        <member name="F:TrippyGL.Texture.TextureType">
            <summary>The type of this <see cref="T:TrippyGL.Texture"/>, such as 1D, 2D, Multisampled 2D, Array 2D, CubeMap, etc.</summary>
        </member>
        <member name="F:TrippyGL.Texture.PixelInternalFormat">
            <summary>The internal format of the pixels, such as RGBA, RGB, R32f, or even different depth/stencil formats.</summary>
        </member>
        <member name="F:TrippyGL.Texture.PixelType">
            <summary>The data type of the components of the <see cref="T:TrippyGL.Texture"/>'s pixels.</summary>
        </member>
        <member name="F:TrippyGL.Texture.PixelFormat">
            <summary>The format of the pixel data.</summary>
        </member>
        <member name="F:TrippyGL.Texture.ImageFormat">
            <summary>The format for this <see cref="T:TrippyGL.Texture"/>'s image.</summary>
        </member>
        <member name="P:TrippyGL.Texture.IsMipmapped">
            <summary>Gets whether this <see cref="T:TrippyGL.Texture"/> is mipmapped.</summary>
        </member>
        <member name="F:TrippyGL.Texture.isNotMipmappable">
            <summary>False if this <see cref="T:TrippyGL.Texture"/> can be mipmapped (depends on texture type).</summary>
        </member>
        <member name="P:TrippyGL.Texture.IsMipmappable">
            <summary>Gets whether this <see cref="T:TrippyGL.Texture"/> can be mipmapped (depends on texture type).</summary>
        </member>
        <member name="P:TrippyGL.Texture.IsBound">
            <summary>Gets whether this <see cref="T:TrippyGL.Texture"/> is currently bound to a unit.</summary>
        </member>
        <member name="P:TrippyGL.Texture.IsBoundAndActive">
            <summary>Gets whether this <see cref="T:TrippyGL.Texture"/> is currently bound to the currently active texture unit.</summary>
        </member>
        <member name="P:TrippyGL.Texture.CurrentlyBoundUnit">
            <summary>Gets the texture unit to which this <see cref="T:TrippyGL.Texture"/> is currently bound, or -1 if it's not bound anywhere.</summary>
        </member>
        <member name="F:TrippyGL.Texture.lastBindUnit">
            <summary>The last texture unit to which this <see cref="T:TrippyGL.Texture"/> was bound. This value is used by binding functions.</summary>
        </member>
        <member name="M:TrippyGL.Texture.#ctor(TrippyGL.GraphicsDevice,Silk.NET.OpenGL.TextureTarget,TrippyGL.TextureImageFormat)">
            <summary>
            Creates a <see cref="T:TrippyGL.Texture"/> with specified <see cref="T:Silk.NET.OpenGL.TextureTarget"/> and <see cref="T:TrippyGL.TextureImageFormat"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="type">The type of texture (or texture target) the texture will be.</param>
            <param name="imageFormat">The type of image format this texture will store.</param>
        </member>
        <member name="M:TrippyGL.Texture.SetTextureFilters(Silk.NET.OpenGL.TextureMinFilter,Silk.NET.OpenGL.TextureMagFilter)">
            <summary>
            Sets this <see cref="T:TrippyGL.Texture"/>'s minifying and magnifying filters.
            </summary>
            <param name="minFilter">The desired minifying filter for the <see cref="T:TrippyGL.Texture"/>.</param>
            <param name="magFilter">The desired magnifying filter for the <see cref="T:TrippyGL.Texture"/>.</param>
        </member>
        <member name="M:TrippyGL.Texture.GenerateMipmaps">
            <summary>
            Generates mipmaps for this <see cref="T:TrippyGL.Texture"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:TrippyGL.Texture1D">
            <summary>
            A <see cref="T:TrippyGL.Texture"/> whose image has only one dimension.
            </summary>
        </member>
        <member name="P:TrippyGL.Texture1D.Width">
            <summary>The size of the <see cref="T:TrippyGL.Texture1D"/>.</summary>
        </member>
        <member name="M:TrippyGL.Texture1D.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.Boolean,TrippyGL.TextureImageFormat)">
            <summary>
            Creates a <see cref="T:TrippyGL.Texture1D"/> with the desired parameters.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="width">The size of the <see cref="T:TrippyGL.Texture1D"/>.</param>
            <param name="generateMipmaps">Whether to generate mipmaps for this <see cref="T:TrippyGL.Texture1D"/>.</param>
            <param name="imageFormat">The image format for this <see cref="T:TrippyGL.Texture1D"/>.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.SetDataPtr(System.Void*,System.Int32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of this <see cref="T:TrippyGL.Texture1D"/>.
            </summary>
            <param name="ptr">The pointer from which the pixel data will be read.</param>
            <param name="xOffset">The X coordinate of the first pixel to write.</param>
            <param name="width">The amount of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.SetData``1(System.ReadOnlySpan{``0},System.Int32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of the <see cref="T:TrippyGL.Texture1D"/>. The amount of pixels written
            is the length of the given <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture1D"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the pixel data.</param>
            <param name="xOffset">The X coordinate of the first pixel to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.GetDataPtr(System.Void*,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture1D"/>.
            </summary>
            <param name="ptr">The pointer to which the pixel data will be written.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.GetData``1(System.Span{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture1D"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture1D"/>'s pixels.</typeparam>
            <param name="data">The <see cref="T:System.Span`1"/> in which to write the pixel data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.SetWrapMode(Silk.NET.OpenGL.TextureWrapMode)">
            <summary>
            Sets the texture coordinate wrapping modes for when a texture is sampled outside the [0, 1] range.
            </summary>
            <param name="sWrapMode">The wrap mode for the S (or texture-X) coordinate.</param>
        </member>
        <member name="M:TrippyGL.Texture1D.RecreateImage(System.UInt32)">
            <summary>
            Recreates this <see cref="T:TrippyGL.Texture1D"/>'s image with a new size,
            resizing the <see cref="T:TrippyGL.Texture1D"/> but losing the image data.
            </summary>
            <param name="width">The new size for the <see cref="T:TrippyGL.Texture1D"/>.</param>
        </member>
        <member name="T:TrippyGL.Texture2D">
            <summary>
            A <see cref="T:TrippyGL.Texture"/> whose image has two dimensions and support for multisampling.
            </summary>
        </member>
        <member name="P:TrippyGL.Texture2D.Width">
            <summary>The width of this <see cref="T:TrippyGL.Texture2D"/>.</summary>
        </member>
        <member name="P:TrippyGL.Texture2D.Height">
            <summary>The height of this <see cref="T:TrippyGL.Texture2D"/>.</summary>
        </member>
        <member name="M:TrippyGL.Texture2D.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32,System.Boolean,System.UInt32,TrippyGL.TextureImageFormat)">
            <summary>
            Creates a <see cref="T:TrippyGL.Texture2D"/> with the desired parameters but no image data.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="width">The width of the <see cref="T:TrippyGL.Texture2D"/>.</param>
            <param name="height">The height of the <see cref="T:TrippyGL.Texture2D"/>.</param>
            <param name="generateMipmaps">Whether to generate mipmaps for this <see cref="T:TrippyGL.Texture2D"/>.</param>
            <param name="samples">The amount of samples for this <see cref="T:TrippyGL.Texture2D"/>. Default is 0.</param>
            <param name="imageFormat">The image format for this <see cref="T:TrippyGL.Texture2D"/>.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.SetDataPtr(System.Void*,System.Int32,System.Int32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of the <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <param name="ptr">The pointer from which the pixel data will be read.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.SetData``1(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of the <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture2D"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.SetData``1(System.ReadOnlySpan{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of the entire <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture2D"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.GetDataPtr(System.Void*,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <param name="ptr">The pointer to which the pixel data will be written.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.GetData``1(System.Span{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture2D"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.Span`1"/> in which to write the pixel data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.SetWrapModes(Silk.NET.OpenGL.TextureWrapMode,Silk.NET.OpenGL.TextureWrapMode)">
            <summary>
            Sets the texture coordinate wrapping modes for when a texture is sampled outside the [0, 1] range.
            </summary>
            <param name="sWrapMode">The wrap mode for the S (or texture-X) coordinate.</param>
            <param name="tWrapMode">The wrap mode for the T (or texture-Y) coordinate.</param>
        </member>
        <member name="M:TrippyGL.Texture2D.RecreateImage(System.UInt32,System.UInt32)">
            <summary>
            Recreates this <see cref="T:TrippyGL.Texture2D"/>'s image with a new size,
            resizing the <see cref="T:TrippyGL.Texture2D"/> but losing the image data.
            </summary>
            <param name="width">The new width for the <see cref="T:TrippyGL.Texture2D"/>.</param>
            <param name="height">The new height for the <see cref="T:TrippyGL.Texture2D"/>.</param>
        </member>
        <member name="T:TrippyGL.Texture2DArray">
            <summary>
            A <see cref="T:TrippyGL.Texture"/> containing an array of two-dimensional images and support for multisampling
            </summary>
        </member>
        <member name="P:TrippyGL.Texture2DArray.Width">
            <summary>The width of this <see cref="T:TrippyGL.Texture2DArray"/>.</summary>
        </member>
        <member name="P:TrippyGL.Texture2DArray.Height">
            <summary>The height of this <see cref="T:TrippyGL.Texture2DArray"/>.</summary>
        </member>
        <member name="P:TrippyGL.Texture2DArray.Depth">
            <summary>The amount of images or array length of this <see cref="T:TrippyGL.Texture2DArray"/>.</summary>
        </member>
        <member name="M:TrippyGL.Texture2DArray.SetDataPtr(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of the <see cref="T:TrippyGL.Texture2DArray"/>.
            </summary>
            <param name="ptr">The pointer from which the pixel data will be read.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectZ">The Z coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="rectDepth">The depth of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.SetData``1(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of the <see cref="T:TrippyGL.Texture2DArray"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture2DArray"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectZ">The Z coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="rectDepth">The depth of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.SetData``1(System.ReadOnlySpan{``0},System.Int32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an entire array layer of the <see cref="T:TrippyGL.Texture2DArray"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.Texture2DArray"/>'s pixels.</typeparam>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="depthLevel">The array layer to set the data for.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.GetDataPtr(System.Void*,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture2DArray"/>.
            </summary>
            <param name="ptr">The pointer to which the pixel data will be written.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.GetData``1(System.Span{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of the entire <see cref="T:TrippyGL.Texture2DArray"/>.
            </summary>
            <param name="data">A <see cref="T:System.Span`1"/> in which to write the pixel data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.SetWrapModes(Silk.NET.OpenGL.TextureWrapMode,Silk.NET.OpenGL.TextureWrapMode)">
            <summary>
            Sets the coordinate wrapping modes for when the <see cref="T:TrippyGL.Texture2DArray"/> is sampled outside the [0, 1] range.
            </summary>
            <param name="sWrapMode">The wrap mode for the S (or texture-X) coordinate.</param>
            <param name="tWrapMode">The wrap mode for the T (or texture-Y) coordinate.</param>
        </member>
        <member name="M:TrippyGL.Texture2DArray.RecreateImage(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Recreates this <see cref="T:TrippyGL.Texture2DArray"/>'s images with a new size,
            resizing the <see cref="T:TrippyGL.Texture2DArray"/> but losing the image data.
            </summary>
            <param name="width">The new width for the <see cref="T:TrippyGL.Texture2DArray"/>.</param>
            <param name="height">The new height for the <see cref="T:TrippyGL.Texture2DArray"/>.</param>
            <param name="depth">The new depth for the <see cref="T:TrippyGL.Texture2DArray"/>.</param>
        </member>
        <member name="T:TrippyGL.TextureBatcher">
            <summary>
            Provides a simple and efficient way to draw 2D textures in batches.
            </summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.InitialBatchItemsCapacity">
            <summary>The initial capacity for the internal batch items array.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.MaxBatchItemCapacity">
            <summary>The maximum capacity for the internal batch items array.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.InitialBufferCapacity">
            <summary>The initial capacity for the <see cref="T:TrippyGL.VertexBuffer`1"/> used for drawing the item's vertices.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.MaxBufferCapacity">
            <summary>The maximum capacity for the <see cref="T:TrippyGL.VertexBuffer`1"/> used for drawing the item's vertices.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.triangles">
            <summary>Used to store vertices before sending them to <see cref="F:TrippyGL.TextureBatcher.vertexBuffer"/>.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.vertexBuffer">
            <summary>Stores the triangles for rendering.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.batchItems">
            <summary>Stores the batch items that haven't been flushed yet.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatcher.batchItemCount">
            <summary>The amount of batch items stored in <see cref="F:TrippyGL.TextureBatcher.batchItems"/>.</summary>
        </member>
        <member name="P:TrippyGL.TextureBatcher.IsActive">
            <summary>
            Whether <see cref="M:TrippyGL.TextureBatcher.Begin(TrippyGL.BatcherBeginMode)"/> was called on this <see cref="T:TrippyGL.TextureBatcher"/>
            but <see cref="M:TrippyGL.TextureBatcher.End"/> hasn't yet.
            </summary>
        </member>
        <member name="P:TrippyGL.TextureBatcher.BeginMode">
            <summary>
            The <see cref="T:TrippyGL.BatcherBeginMode"/> specified in the last <see cref="M:TrippyGL.TextureBatcher.Begin(TrippyGL.BatcherBeginMode)"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.TextureBatcher.ShaderProgram">
            <summary>The <see cref="P:TrippyGL.TextureBatcher.ShaderProgram"/> this <see cref="T:TrippyGL.TextureBatcher"/> is currently using.</summary>
        </member>
        <member name="P:TrippyGL.TextureBatcher.TextureUniform">
            <summary>
            The <see cref="T:TrippyGL.ShaderUniform"/> this <see cref="T:TrippyGL.TextureBatcher"/> uses for setting the texture
            on <see cref="P:TrippyGL.TextureBatcher.ShaderProgram"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.TextureBatcher.IsDisposed">
            <summary>Whether this <see cref="T:TrippyGL.TextureBatcher"/> has been disposed.</summary>
        </member>
        <member name="M:TrippyGL.TextureBatcher.#ctor(TrippyGL.GraphicsDevice,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.TextureBatcher"/>, with a specified initial capacity for batch items as
            optional parameter.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.TextureBatcher"/> will use.</param>
            <param name="initialBatchCapacity">The initial capacity for the internal batch items array.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.SetShaderProgram(TrippyGL.SimpleShaderProgram)">
            <summary>
            Sets the <see cref="T:TrippyGL.ShaderProgram"/> this <see cref="T:TrippyGL.TextureBatcher"/> uses for rendering.
            </summary>
            <param name="simpleProgram">The <see cref="T:TrippyGL.SimpleShaderProgram"/> to use.</param>
            <remarks>
            The <see cref="T:TrippyGL.SimpleShaderProgram"/> doesn't need to have texture sampling and vertex colors
            enabled. Lightning however will not work, since the vertices lack normal data.<para/>
            The locations of the attributes on the program must still match 0 for position, 1 for
            color and 2 for texture coordinates.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.SetShaderProgram(TrippyGL.ShaderProgram,TrippyGL.ShaderUniform)">
            <summary>
            Sets the <see cref="T:TrippyGL.ShaderProgram"/> this <see cref="T:TrippyGL.TextureBatcher"/> uses for rendering.
            </summary>
            <param name="shaderProgram">The <see cref="T:TrippyGL.ShaderProgram"/> to use.</param>
            <param name="textureUniform">The <see cref="T:TrippyGL.ShaderUniform"/> from which to set the textures to draw.</param>
            <remarks>
            The <see cref="T:TrippyGL.ShaderProgram"/> must use attribute location 0 for position.
            Color and TexCoords are optional, but if present they must be in attribute locations
            1 and 2 respectively.<para/>
            textureUniform can be an empty <see cref="T:TrippyGL.ShaderUniform"/>, in which case the <see cref="T:TrippyGL.TextureBatcher"/>
            will simply not set any texture when rendering.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Begin(TrippyGL.BatcherBeginMode)">
            <summary>
            Begins drawing a new batch of textures.
            </summary>
            <param name="beginMode">The mode in which flushing the textures is handled.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.End">
            <summary>
            Ends drawing a batch of textures and flushes any textures that are waiting to be drawn.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatcher.ValidateBeginCalled">
            <summary>
            Throws an exception if this <see cref="T:TrippyGL.TextureBatcher"/> isn't currently active.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatcher.EnsureBatchListCapacity(System.Int32)">
            <summary>
            Ensures that <see cref="F:TrippyGL.TextureBatcher.batchItems"/> has at least the required capacity, but if the array
            is resized then the new capacity won't exceed <see cref="F:TrippyGL.TextureBatcher.MaxBatchItemCapacity"/>.
            </summary>
            <param name="requiredCapacity">The required capacity for the <see cref="F:TrippyGL.TextureBatcher.batchItems"/> array.</param>
            <returns>Whether the required capacity is met by the new capacity.</returns>
        </member>
        <member name="M:TrippyGL.TextureBatcher.EnsureBufferCapacity(System.Int32)">
            <summary>
            Ensures that <see cref="F:TrippyGL.TextureBatcher.vertexBuffer"/> and the <see cref="F:TrippyGL.TextureBatcher.triangles"/> array have at least
            the required capacity, but if a resize is needed then the new capacity won't exceed
            <see cref="F:TrippyGL.TextureBatcher.MaxBufferCapacity"/>.
            </summary>
            <param name="requiredCapacity">The required capacity for <see cref="F:TrippyGL.TextureBatcher.vertexBuffer"/>.</param>
            <remarks>
            <see cref="F:TrippyGL.TextureBatcher.triangles"/> will always be resized to have the same size as <see cref="F:TrippyGL.TextureBatcher.vertexBuffer"/>.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.GetNextBatchItem">
            <summary>
            Gets a <see cref="T:TrippyGL.TextureBatchItem"/> that's already in the <see cref="F:TrippyGL.TextureBatcher.batchItems"/> array,
            in the next available position, then increments <see cref="F:TrippyGL.TextureBatcher.batchItemCount"/>.
            </summary>
            <remarks>
            When a <see cref="T:TrippyGL.TextureBatchItem"/> is returned by this method, it is already inside
            the <see cref="F:TrippyGL.TextureBatcher.batchItems"/> array. To properly use this method, get an item and simply
            set it's value, without storing the item anywhere.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawRaw(TrippyGL.Texture2D,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch, using raw vertices.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="VertexTL">The top-left vertex.</param>
            <param name="VertexTR">The top-right vertex.</param>
            <param name="VertexBR">The botom-right vertex.</param>
            <param name="VertexBL">The bottom-left vertex.</param>
            <remarks>
            Even though the vertices are named by position, that positioning doesn't have to be followed.
            The vertices are drawn as two triangles composed as (TL, BR, TR) (TL, BL, BR).<para/>
            If sorting by depth is used, the depth for these vertices will be the Z coordinate of the
            top-left vertex.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawRaw(TrippyGL.Texture2D,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@,TrippyGL.VertexColorTexture@,System.Numerics.Matrix4x4@)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch, using raw vertices
            whose position first gets transformed by a matrix.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="VertexTL">The top-left vertex.</param>
            <param name="VertexTR">The top-right vertex.</param>
            <param name="VertexBR">The botom-right vertex.</param>
            <param name="VertexBL">The bottom-left vertex.</param>
            <param name="matrix">The matrix for transforming the vertex positions.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Draw(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},TrippyGL.Color4b,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="position">The position at which to draw the texture.</param>
            <param name="source">The area of the texture to draw (or null to draw the whole texture).</param>
            <param name="color">The color with which to draw the texture.</param>
            <param name="scale">The scale value that multiplies the size of the drawn texture.</param>
            <param name="rotation">The rotation to draw the texture with, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the texture.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Draw(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},TrippyGL.Color4b,System.Single,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="position">The position at which to draw the texture.</param>
            <param name="source">The area of the texture to draw (or null to draw the whole texture).</param>
            <param name="color">The color with which to draw the texture.</param>
            <param name="scale">The scale value that multiplies the size of the drawn texture.</param>
            <param name="rotation">The rotation to draw the texture with, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the texture.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Draw(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},TrippyGL.Color4b,System.Single)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="position">The position at which to draw the texture.</param>
            <param name="source">The area of the texture to draw (or null to draw the whole texture).</param>
            <param name="color">The color with which to draw the texture.</param>
            <param name="depth">The depth at which to draw the texture.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Draw(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},System.Single)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="position">The position at which to draw the texture.</param>
            <param name="source">The area of the texture to draw (or null to draw the whole texture).</param>
            <param name="depth">The depth at which to draw the texture.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Draw(TrippyGL.Texture2D,System.Numerics.Vector2,TrippyGL.Color4b,System.Single)">
            <summary>
            Adds a <see cref="T:TrippyGL.Texture2D"/> for drawing to the current batch.
            </summary>
            <param name="texture">The <see cref="T:TrippyGL.Texture2D"/> to draw.</param>
            <param name="position">The position at which to draw the texture.</param>
            <param name="color">The color with which to draw the texture.</param>
            <param name="depth">The depth at which to draw the texture.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,TrippyGL.Color4b,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="rotation">The rotation with which to draw the text, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,TrippyGL.Color4b,System.Single,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="rotation">The rotation with which to draw the text, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,TrippyGL.Color4b,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,TrippyGL.Color4b,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,TrippyGL.Color4b,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,TrippyGL.Color4b,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="rotation">The rotation with which to draw the text, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,TrippyGL.Color4b,System.Single,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="rotation">The rotation with which to draw the text, measured in radians.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,TrippyGL.Color4b,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,TrippyGL.Color4b,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="scale">The scale value that multiplies the size of the drawn text.</param>
            <param name="origin">The origin for rotation and scaling in pixel coordinates.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,TrippyGL.Color4b,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="color">The color with which to draw the text.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.DrawString(TrippyGL.TextureFont,System.Text.StringBuilder,System.Numerics.Vector2,System.Single)">
            <summary>
            Adds multiple textures forming a string of text to the current batch.
            </summary>
            <param name="font">The <see cref="T:TrippyGL.TextureFont"/> to draw the text with.</param>
            <param name="text">The string of text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="depth">The depth at which to draw the string of text.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.StartDraw(TrippyGL.Texture2D)">
            <summary>
            Performs any operations that need to be done before more batch items can be added.
            This should be called at the start of any Draw() method.
            </summary>
            <param name="texture">The texture of the next batch item/s to be added.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.EndDraw(TrippyGL.TextureBatchItem)">
            <summary>
            Performs any operations that need to be done after a batch item was added.
            This should be called at the end of any Draw() method that only adds a single item.
            </summary>
            <param name="item">The <see cref="T:TrippyGL.TextureBatchItem"/> that was added.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.SetItemSortKey(TrippyGL.TextureBatchItem)">
            <summary>
            Sets the <see cref="F:TrippyGL.TextureBatchItem.SortValue"/> of the given item based on
            the current <see cref="P:TrippyGL.TextureBatcher.BeginMode"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatcher.FlushIfNeeded">
            <summary>
            Checks whether the <see cref="T:TrippyGL.TextureBatcher"/> should be flushed after adding more batch
            items based on the current <see cref="P:TrippyGL.TextureBatcher.BeginMode"/> and if so, flushes.
            </summary>
            <returns>Whether the <see cref="T:TrippyGL.TextureBatcher"/> was flushed.</returns>
            <remarks>This should always be called after adding batch items of the same texture.</remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Flush(System.Boolean)">
            <summary>
            Renders all the items in <see cref="F:TrippyGL.TextureBatcher.batchItems"/>.
            </summary>
            <param name="sameTextureEnsured">
            Whether it is ensured that all the <see cref="T:TrippyGL.TextureBatchItem"/> in <see cref="F:TrippyGL.TextureBatcher.batchItems"/>
            have the same textures.
            </param>
            <remarks>
            This function assumes <see cref="M:TrippyGL.TextureBatcher.Begin(TrippyGL.BatcherBeginMode)"/> was succesfully called and
            that this object isn't disposed.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureBatcher.FindDifferentTexture(TrippyGL.Texture2D,System.Int32)">
            <summary>
            Returns the index of the first <see cref="T:TrippyGL.TextureBatchItem"/> in <see cref="F:TrippyGL.TextureBatcher.batchItems"/>
            that has a different texture than the one specified.
            </summary>
            <param name="currentTexture">Skips all items with this texture.</param>
            <param name="startIndex">The index in the array at which to start looking.</param>
        </member>
        <member name="M:TrippyGL.TextureBatcher.Dispose">
            <summary>
            Disposes the <see cref="T:TrippyGL.GraphicsResource"/>-s used by this <see cref="T:TrippyGL.TextureBatcher"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.TextureBatchItem">
            <summary>
            Used internally by <see cref="T:TrippyGL.TextureBatcher"/> to store the vertices for each Draw().
            </summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.Texture">
            <summary>The <see cref="T:TrippyGL.Texture2D"/> to draw the vertices with.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.SortValue">
            <summary>
            A value used for sorting. It's value might come from different places depending
            on the <see cref="P:TrippyGL.TextureBatcher.BeginMode"/>.
            </summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.VertexTL">
            <summary>The top-left vertex.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.VertexTR">
            <summary>The top-right vertex.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.VertexBL">
            <summary>The bottom-left vertex.</summary>
        </member>
        <member name="F:TrippyGL.TextureBatchItem.VertexBR">
            <summary>The bottom-right vertex.</summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.SetValue(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},TrippyGL.Color4b,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
            Calculates and sets all the values in this <see cref="T:TrippyGL.TextureBatchItem"/> except for <see cref="F:TrippyGL.TextureBatchItem.SortValue"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.SetValue(TrippyGL.Texture2D,System.Numerics.Vector2,System.Drawing.Rectangle,TrippyGL.Color4b,System.Numerics.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Calculates and sets all the values in this <see cref="T:TrippyGL.TextureBatchItem"/> except for <see cref="F:TrippyGL.TextureBatchItem.SortValue"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.SetValue(TrippyGL.Texture2D,System.Numerics.Vector2,System.Nullable{System.Drawing.Rectangle},TrippyGL.Color4b,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Calculates and sets all the values in this <see cref="T:TrippyGL.TextureBatchItem"/> except for <see cref="F:TrippyGL.TextureBatchItem.SortValue"/>
            without calculating rotation.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.SetValue(TrippyGL.Texture2D,System.Numerics.Vector2,System.Drawing.Rectangle,TrippyGL.Color4b,System.Numerics.Vector2,System.Single)">
            <summary>
            Calculates and sets all the values in this <see cref="T:TrippyGL.TextureBatchItem"/> except for <see cref="F:TrippyGL.TextureBatchItem.SortValue"/>
            without calculating rotation.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.SetValue(TrippyGL.Texture2D,System.Numerics.Vector2,System.Drawing.Rectangle,TrippyGL.Color4b,System.Single)">
            <summary>
            Calculates and sets all the values on this <see cref="T:TrippyGL.TextureBatchItem"/> except for <see cref="F:TrippyGL.TextureBatchItem.SortValue"/>
            without calculating rotation nor scale.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureBatchItem.CompareTo(TrippyGL.TextureBatchItem)">
            <summary>
            Compares this item's <see cref="F:TrippyGL.TextureBatchItem.SortValue"/> with another item's.
            </summary>
        </member>
        <member name="P:TrippyGL.TextureCubemap.Size">
            <summary>The size of a face from this <see cref="T:TrippyGL.TextureCubemap"/>.</summary>
        </member>
        <member name="M:TrippyGL.TextureCubemap.#ctor(TrippyGL.GraphicsDevice,System.UInt32,TrippyGL.TextureImageFormat)">
            <summary>
            Creates a <see cref="T:TrippyGL.TextureCubemap"/> with the desired parameters but no image data.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="size">The size (width and height) of the cubemap's faces.</param>
            <param name="imageFormat">The image format for this <see cref="T:TrippyGL.TextureCubemap"/>.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.SetDataPtr(TrippyGL.CubemapFace,System.Void*,System.Int32,System.Int32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of a face of the <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
            <param name="face">The face of the <see cref="T:TrippyGL.TextureCubemap"/> to set data for.</param>
            <param name="ptr">The pointer from which the pixel data will be read.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.SetData``1(TrippyGL.CubemapFace,System.ReadOnlySpan{``0},System.Int32,System.Int32,System.UInt32,System.UInt32,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of an area of a face of the <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.TextureCubemap"/>'s pixels.</typeparam>
            <param name="face">The face of the <see cref="T:TrippyGL.TextureCubemap"/> to set data for.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="rectX">The X coordinate of the first pixel to write.</param>
            <param name="rectY">The Y coordinate of the first pixel to write.</param>
            <param name="rectWidth">The width of the rectangle of pixels to write.</param>
            <param name="rectHeight">The height of the rectangle of pixels to write.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.SetData``1(TrippyGL.CubemapFace,System.ReadOnlySpan{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Sets the data of a face of the <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.TextureCubemap"/>'s pixels.</typeparam>
            <param name="face">The face of the <see cref="T:TrippyGL.TextureCubemap"/> to set data for.</param>
            <param name="data">The <see cref="T:System.ReadOnlySpan`1"/> containing the new pixel data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.GetDataPtr(TrippyGL.CubemapFace,System.Void*,Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of an entire face of the <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
            <param name="face">The face of the cubemap to set data for.</param>
            <param name="ptr">The pointer to which the pixel data will be written.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.GetData``1(TrippyGL.CubemapFace,System.Span{``0},Silk.NET.OpenGL.PixelFormat)">
            <summary>
            Gets the data of an entire face of the <see cref="T:TrippyGL.TextureCubemap"/>.
            </summary>
            <typeparam name="T">A struct with the same format as this <see cref="T:TrippyGL.TextureCubemap"/>'s pixels.</typeparam>
            <param name="face">The face of the <see cref="T:TrippyGL.TextureCubemap"/> to set data for.</param>
            <param name="data">The array in which to write the texture data.</param>
            <param name="pixelFormat">The pixel format the data will be read as. 0 for this texture's default.</param>
        </member>
        <member name="M:TrippyGL.TextureCubemap.SetWrapModes(Silk.NET.OpenGL.TextureWrapMode,Silk.NET.OpenGL.TextureWrapMode,Silk.NET.OpenGL.TextureWrapMode)">
            <summary>
            Sets the texture coordinate wrapping modes for when a texture is sampled outside the [0, 1] range.
            </summary>
            <param name="sWrapMode">The wrap mode for the S (or texture-X) coordinate.</param>
            <param name="tWrapMode">The wrap mode for the T (or texture-Y) coordinate.</param>
            <param name="rWrapMode">The wrap mode for the R (or texture-Z) coordinate.</param>
        </member>
        <member name="T:TrippyGL.TextureFont">
            <summary>
            Represent a range of drawable text characters, where all the characters are stored
            inside a <see cref="T:TrippyGL.Texture2D"/>. Also provides methods for measuring text.
            </summary>
        </member>
        <member name="F:TrippyGL.TextureFont.NewlineIndicator">
            <summary>The character <see cref="T:TrippyGL.TextureFont"/>-s use to indicate a new line.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.Texture">
            <summary>The <see cref="T:TrippyGL.Texture2D"/> containing this <see cref="T:TrippyGL.TextureFont"/>'s characters.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.Size">
            <summary>This <see cref="T:TrippyGL.TextureFont"/>'s size, typically measured in pixels.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.Name">
            <summary>This <see cref="T:TrippyGL.TextureFont"/>'s name.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.FirstChar">
            <summary>The lowest character available in this <see cref="T:TrippyGL.TextureFont"/>.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.LastChar">
            <summary>The highest character available in this <see cref="T:TrippyGL.TextureFont"/>.</summary>
        </member>
        <member name="P:TrippyGL.TextureFont.CharCount">
            <summary>The amount of characters this <see cref="T:TrippyGL.TextureFont"/> contains.</summary>
            <remarks>This is equal to LastChar - FirstChar + 1.</remarks>
        </member>
        <member name="F:TrippyGL.TextureFont.Ascender">
            <summary>The distance between the baseline and the highest glyph's highest point. Typically positive.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.Descender">
            <summary>The distance between the baseline and the lowest glyph's lowest point. Typically negative.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.LineGap">
            <summary>The distance between the lowest point of a line and the highest point of the next line.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.LineAdvance">
            <summary>The baseline-to-baseline distance to advance when drawing a new line with this <see cref="T:TrippyGL.TextureFont"/>.</summary>
            <remarks>This is calculated as ascender - descender + lineGap.</remarks>
        </member>
        <member name="F:TrippyGL.TextureFont.renderOffsets">
            <summary>Offsets that should be directly applied to the characters when drawing them.</summary>
        </member>
        <member name="F:TrippyGL.TextureFont.sources">
            <summary>The areas in <see cref="F:TrippyGL.TextureFont.Texture"/> where each character is located.</summary>
        </member>
        <member name="P:TrippyGL.TextureFont.IsDisposed">
            <summary>Whether the graphics resources used by this <see cref="T:TrippyGL.TextureFont"/> have been disposed.</summary>
        </member>
        <member name="M:TrippyGL.TextureFont.#ctor(TrippyGL.Texture2D,System.Single,System.Char,System.Char,System.Numerics.Vector2[],System.Drawing.Rectangle[],System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a <see cref="T:TrippyGL.TextureFont"/>.
            </summary>
            <remarks>
            Any array passed to this method will NOT be copied. The provided instance will be used instead.
            Holding on to a reference to these arrays and modifying them afterwards can have unexpected
            behavior.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureFont.ValidateCharAvailable(System.Char)">
            <summary>
            Checks that the given character is available in this <see cref="T:TrippyGL.TextureFont"/> and
            throws an exception otherwise.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.HasCharacter(System.Char)">
            <summary>
            Returns whether this <see cref="T:TrippyGL.TextureFont"/> can draw a specified character.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.HasCharacters(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns whether this <see cref="T:TrippyGL.TextureFont"/> can draw all the characters in the specified string.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.GetAdvance(System.Char)">
            <summary>
            Gets the distance to advance by after drawing a character.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.GetKerning(System.Char,System.Char)">
            <summary>
            Gets an offset that should be applied between two characters when drawing.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.GetSource(System.Char)">
            <summary>
            Gets the area in the <see cref="F:TrippyGL.TextureFont.Texture"/> where a specified character is found.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.GetRenderOffset(System.Char)">
            <summary>
            Gets the offset that should be applied directly to a character while drawing.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.Measure(System.ReadOnlySpan{System.Char})">
            <summary>
            Measures the size in pixels of a string of text.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.MeasureLine(System.ReadOnlySpan{System.Char})">
            <summary>
            Measures the size in pixels of a single line of text.
            </summary>
            <remarks>
            For monospaced fonts, this is a O(1) operation that doesn't validate characters.<para/>
            For non-monospaced fonts, invalid characters (including newline) will throw an exception.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureFont.MeasureHeight(System.ReadOnlySpan{System.Char})">
            <summary>
            Measures the height of the given text.
            </summary>
        </member>
        <member name="M:TrippyGL.TextureFont.Dispose">
            <summary>
            Disposes the <see cref="T:TrippyGL.GraphicsResource"/>-s used by this <see cref="T:TrippyGL.TextureFont"/>.
            </summary>
            <remarks>
            If you have multiple <see cref="T:TrippyGL.TextureFont"/> sharing a single texture, disposing any
            of these will dispose the texture, thus disposing all of them.
            </remarks>
        </member>
        <member name="M:TrippyGL.TextureFont.SanitizeString(System.String,System.Char)">
            <summary>
            Creates a copy of the given string, where all the characters that aren't
            available in this <see cref="T:TrippyGL.TextureFont"/> are replaced by a "default character".
            </summary>
            <param name="text">The string of text to sanitize.</param>
            <param name="defaultChar">The char to replace unavailable chars with.</param>
            <returns>A newly created string, or the same string instance if no chars need replacing.</returns>
        </member>
        <member name="M:TrippyGL.TextureFont.SanitizeString(System.Span{System.Char},System.Char)">
            <summary>
            Replaces all the characters in the given string that aren't available in
            this <see cref="T:TrippyGL.TextureFont"/> with a "default character".
            </summary>
            <remarks>The replacing is done in-place.</remarks>
            <param name="chars">The string of text to sanitize.</param>
            <param name="defaultChar">The char to replace unavailable chars with.</param>
        </member>
        <member name="M:TrippyGL.TextureFont.SanitizeString(System.Text.StringBuilder,System.Char)">
            <summary>
            Replaces all the characters in the given string that aren't available in
            this <see cref="T:TrippyGL.TextureFont"/> with a "default character".
            </summary>
            <remarks>The replacing is done in-place.</remarks>
            <param name="chars">The string of text to sanitize.</param>
            <param name="defaultChar">The char to replace unavailable chars with.</param>
        </member>
        <member name="T:TrippyGL.TextureMultisamplable">
            <summary>
            An abstract <see cref="T:TrippyGL.Texture"/> type that supports multisampling.
            </summary>
        </member>
        <member name="P:TrippyGL.TextureMultisamplable.Samples">
            <summary>The amount of samples this <see cref="T:TrippyGL.Texture"/> has.</summary>
        </member>
        <member name="T:TrippyGL.UniformBufferSubset">
            <summary>
            A <see cref="T:TrippyGL.BufferObjectSubset"/> whose purpose is to store uniform block values for shaders to read from.
            </summary>
        </member>
        <member name="F:TrippyGL.UniformBufferSubset.ElementSize">
            <summary>The size of a single uniform block value, measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.UniformBufferSubset.ElementStride">
            <summary>The offset between the start of a uniform value and the start of the next.</summary>
        </member>
        <member name="P:TrippyGL.UniformBufferSubset.StorageLength">
            <summary>The amount of values this subset is able to store.</summary>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset.ResizeSubset(System.UInt32,System.UInt32)">
            <summary>
            Changes the subset location of this <see cref="T:TrippyGL.UniformBufferSubset`1"/>.
            </summary>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins. Must be a multiple of <see cref="P:TrippyGL.GraphicsDevice.UniformBufferOffsetAlignment"/>.</param>
            <param name="storageLength">The length of this subset measured in elements. The final length in bytes may vary between machines.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset.BindBufferRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Binds a specified part of this subset to be used as uniform values.
            </summary>
            <param name="bindingIndex">The binding index this subset will bind to.</param>
            <param name="storageOffsetBytes">The offset into this subset's storage where the bind begins.</param>
            <param name="storageLengthBytes">The amount of bytes available to be read from the binded buffer.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset.GetOffsetAndStorageLengthForIndex(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and length variables to use on <see cref="M:TrippyGL.UniformBufferSubset.BindBufferRange(System.UInt32,System.UInt32,System.UInt32)"/>
            to bind a specific index of this buffer.
            </summary>
            <param name="elementIndex">The index of the element in this buffer to.</param>
            <param name="storageOffsetBytes">The offset into this subset's storage where the bind should start measured in bytes.</param>
            <param name="storageLengthBytes">The length of the ranged bind measured in bytes.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset.CalculateRequiredSizeInBytes``1(TrippyGL.GraphicsDevice,System.UInt32)">
            <summary>
            Calculates the required storage length in bytes required for a UniformBufferSubset with the specified storage length.
            </summary>
            <typeparam name="T">The struct type to use for the uniform block. This must match the uniform block's format.</typeparam>
            <param name="graphicsDevice">The GraphicsDevice the BufferObject will use.</param>
            <param name="storageLength">The amount of structs the <see cref="T:TrippyGL.UniformBufferSubset`1"/> will store.</param>
        </member>
        <member name="T:TrippyGL.UniformBufferSubset`1">
            <summary>
            A <see cref="T:TrippyGL.BufferObjectSubset"/> whose purpose is to store uniform block values for shaders to read from.
            </summary>
            <typeparam name="T">The type of sturct the uniform block will use. This must match the uniform block's format</typeparam>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset`1.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.UniformBufferSubset`1"/> with the given <see cref="T:TrippyGL.BufferObject"/>,
            offset into the buffer in bytes and storage length in elements.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins. Must be a multiple of <see cref="P:TrippyGL.GraphicsDevice.UniformBufferOffsetAlignment"/>.</param>
            <param name="storageLength">The amount of elements this <see cref="T:TrippyGL.UniformBufferSubset`1"/> will be able to store.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset`1.#ctor(TrippyGL.BufferObject)">
            <summary>
            Creates a <see cref="T:TrippyGL.UniformBufferSubset`1"/> with the given <see cref="T:TrippyGL.UniformBufferSubset`1"/>,
            with the subset covering the entire <see cref="T:TrippyGL.BufferObject"/>'s storage.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset`1.SetValue(`0@,System.Int32)">
            <summary>
            Sets one of the uniform values stored in this <see cref="T:TrippyGL.UniformBufferSubset`1"/>.
            </summary>
            <param name="value">The value to store on the uniform buffer.</param>
            <param name="index">The index in which to store the uniform value.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset`1.GetValue(`0@,System.Int32)">
            <summary>
            Gets a value from the buffer's storage.
            </summary>
            <param name="value">The value read from the buffer.</param>
            <param name="index">The array index of the value to read.</param>
        </member>
        <member name="M:TrippyGL.UniformBufferSubset`1.GetValue(System.Int32)">
            <summary>
            Gets a value from the subset's storage.
            </summary>
            <param name="index">The array index of the value to read.</param>
        </member>
        <member name="T:TrippyGL.Utils.TrippyMath">
            <summary>
            Provides some general help math-related functions and values.
            </summary>
        </member>
        <member name="F:TrippyGL.Utils.TrippyMath.PiOver2">
            <summary>The value of PI divided by 2.</summary>
        </member>
        <member name="F:TrippyGL.Utils.TrippyMath.PiOver4">
            <summary>The value of PI divided by 4.</summary>
        </member>
        <member name="F:TrippyGL.Utils.TrippyMath.ThreePiOver2">
            <summary>The value of PI multiplied by 3 and divided by 2.</summary>
        </member>
        <member name="F:TrippyGL.Utils.TrippyMath.TwoPI">
            <summary>The value of PI multiplied by 2.</summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates linearly between two values.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.LerpPrecise(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates linearly between two values.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
            <remarks>
            In comparison to <see cref="M:TrippyGL.Utils.TrippyMath.Lerp(System.Single,System.Single,System.Single)"/>, this function is more
            precise when working with big values.
            </remarks>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.SmoothStepPrecise(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
            <remarks>
            In comparison to <see cref="M:TrippyGL.Utils.TrippyMath.SmoothStep(System.Single,System.Single,System.Single)"/>, this function is more
            precise when working with big values.
            </remarks>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.SmootherStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a 5th-degree equation.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.SmootherStepPrecise(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a 5th-degree equation.
            </summary>
            <param name="min">The initial value in the interpolation.</param>
            <param name="max">The final value in the interpolation.</param>
            <param name="amount">The amount of interpolation, measured between 0 and 1.</param>
            <remarks>
            In comparison to <see cref="M:TrippyGL.Utils.TrippyMath.SmootherStep(System.Single,System.Single,System.Single)"/>, this function is more
            precise when working with big values.
            </remarks>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.GetNextCapacity(System.Int32,System.Int32)">
            <summary>
            Calculates the size to use for an array that needs resizing, where the new size
            will be a power of two times the previous capacity.
            </summary>
            <param name="currentCapacity">The current length of the array.</param>
            <param name="requiredCapacity">The minimum required length for the array.</param>
            <remarks>
            This is calculated with the following equation:<para/>
            <code>
            newCapacity = currentCapacity * pow(2, ceiling(log2(requiredCapacity/currentCapacity)));
            </code>
            </remarks>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.IntegerPow(System.Int32,System.Int32)">
            <summary>
            Calculates an integer value, raised to an integer exponent. Only works with positive values.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.RandomDirection2(System.Random)">
            <summary>
            Returns a random direction, as a unit vector.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.RandomDirection2(System.Random,System.Single)">
            <summary>
            Returns a random direction, as a vector of a specified length.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="length">The desired length of the direction vector.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.RandomDirection3(System.Random)">
            <summary>
            Returns a random direction, as a unit vector.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.RandomDirection3(System.Random,System.Single)">
            <summary>
            Returns a random direction, as a vector of a specified length.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="length">The desired length of the direction vector.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextFloat(System.Random)">
            <summary>
            Returns a random floating-point number in the range [0.0, 1.0).
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextFloat(System.Random,System.Single)">
            <summary>
            Returns a random floating-point number in the range [0.0, max) (or (max, 0.0] if negative).
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="max">The exclusive maximum value of the random number to be generated.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random floating-point number in the range [min, max) (or (max, min] if min>max)
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="min">The inclusive minimum value of the random number to be generated.</param>
            <param name="max">The exclusive maximum value of the random number to be generated.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextDouble(System.Random,System.Double)">
            <summary>
            Returns a random floating-point number in the range [0.0, max) (or (max, 0.0] if negative).
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="max">The exclusive maximum value of the random number to be generated.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random floating-point number in the range [min, max) (or (max, min] if min>max)
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
            <param name="min">The inclusive minimum value of the random number to be generated.</param>
            <param name="max">The exclusive maximum value of the random number to be generated.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextBool(System.Random)">
            <summary>
            Returns a random boolean value.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextColor4b(System.Random)">
            <summary>
            Constructs a completely randomized <see cref="T:TrippyGL.Color4b"/>.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyMath.NextColor4bFullAlpha(System.Random)">
            <summary>
            Constructs a randomized <see cref="T:TrippyGL.Color4b"/> with an alpha value of 255.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> to use for randomizing.</param>
        </member>
        <member name="T:TrippyGL.Utils.TrippyUtils">
            <summary>
            Contains various methods used throughout the library.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsVertexAttribIntegerType(Silk.NET.OpenGL.VertexAttribPointerType)">
            <summary>
            Returns whether the given <see cref="T:Silk.NET.OpenGL.VertexAttribPointerType"/> is of integer format (such as byte, ushort, int, uint).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsVertexAttribIntegerType(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets whether the given <see cref="T:Silk.NET.OpenGL.AttributeType"/> is an integer type (such as int, ivecX, uint or uvecX).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsVertexAttribFloatType(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets whether the given <see cref="T:Silk.NET.OpenGL.AttributeType"/> is a floating point single type (such as float, vecX, matMxN).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsVertexAttribDoubleType(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets whether the given <see cref="T:Silk.NET.OpenGL.AttributeType"/> is a floating point double type (such as double, dvecX or dmatMxN).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetVertexAttribTypeData(Silk.NET.OpenGL.AttributeType,System.UInt32@,System.Int32@,Silk.NET.OpenGL.VertexAttribPointerType@)">
            <summary>
            Gets the corresponding variables for the given <see cref="T:Silk.NET.OpenGL.AttributeType"/>.
            </summary>
            <param name="attribType">The <see cref="T:Silk.NET.OpenGL.AttributeType"/> type to get variables for.</param>
            <param name="indexUseCount">The amount of attribute indices it will need.</param>
            <param name="size">The amount of components each index will have.</param>
            <param name="type">The base type of each component.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetVertexAttribBaseType(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets the corresponding <see cref="T:Silk.NET.OpenGL.VertexAttribPointerType"/> for the given <see cref="T:Silk.NET.OpenGL.AttributeType"/>
            (for example, vec4 would return float. dmat2 would return double, ivec2 returns int).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetVertexAttribTypeSize(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets the <see cref="T:Silk.NET.OpenGL.AttributeType"/>'s size. That is, "vector size" (float is 1, ivec2 is 2, bvec4 is 4, etc).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetVertexAttribTypeIndexCount(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Gets the amount of vertex array indices the given <see cref="T:Silk.NET.OpenGL.AttributeType"/> occupies.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetVertexAttribSizeInBytes(Silk.NET.OpenGL.VertexAttribPointerType)">
            <summary>
            Gets the size in bytes of the given <see cref="T:Silk.NET.OpenGL.VertexAttribPointerType"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsDepthStencilFormatDepthOnly(TrippyGL.DepthStencilFormat)">
            <summary>
            Returns whether a <see cref="T:TrippyGL.DepthStencilFormat"/> is a depth-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsDepthStencilFormatDepthAndStencil(TrippyGL.DepthStencilFormat)">
            <summary>
            Returns whether a <see cref="T:TrippyGL.DepthStencilFormat"/> is a depth-and-stencil format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsDepthStencilFormatStencilOnly(TrippyGL.DepthStencilFormat)">
            <summary>
            Returns whether a <see cref="T:TrippyGL.DepthStencilFormat"/> is a stencil-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsUniformSamplerType(Silk.NET.OpenGL.UniformType)">
            <summary>
            Returns whether the given <see cref="T:Silk.NET.OpenGL.UniformType"/> is a sampler type. This includes sampler-array types.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsUniformSampler2DType(Silk.NET.OpenGL.UniformType)">
            <summary>
            Returns whether the given <see cref="T:Silk.NET.OpenGL.UniformType"/> is a sampler 2D type which can
            sample from a <see cref="T:TrippyGL.Texture2D"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetTextureFormatEnums(TrippyGL.TextureImageFormat,Silk.NET.OpenGL.InternalFormat@,Silk.NET.OpenGL.PixelType@,Silk.NET.OpenGL.PixelFormat@)">
            <summary>
            Turns a value from the <see cref="T:TrippyGL.TextureImageFormat"/> enum into the necessary
            enums to create a <see cref="T:TrippyGL.Texture"/>'s image/storage.
            </summary>
            <param name="imageFormat">The requested image format.</param>
            <param name="pixelInternalFormat">The pixel's internal format.</param>
            <param name="pixelType">The pixel's type.</param>
            <param name="pixelFormat">The pixel's format.</param>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetDefaultGetDataFormat(TrippyGL.TextureImageFormat)">
            <summary>
            Gets the default <see cref="T:Silk.NET.OpenGL.PixelFormat"/> for get texture data operations for the specified <see cref="T:TrippyGL.TextureImageFormat"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsTextureTypeMipmappable(Silk.NET.OpenGL.TextureTarget)">
            <summary>
            Gets whether the specified <see cref="T:Silk.NET.OpenGL.TextureTarget"/> type is mipmappable.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsImageFormatIntegerType(TrippyGL.TextureImageFormat)">
            <summary>
            Returns whether the given <see cref="T:TrippyGL.TextureImageFormat"/> represents a format with integer base type.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsImageFormatDepthOnly(TrippyGL.TextureImageFormat)">
            <summary>
            Returns whether the given <see cref="T:TrippyGL.TextureImageFormat"/> represents a depth-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsImageFormatStencilOnly(TrippyGL.TextureImageFormat)">
            <summary>
            Returns whether the given <see cref="T:TrippyGL.TextureImageFormat"/> represents a stencil-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsImageFormatDepthStencil(TrippyGL.TextureImageFormat)">
            <summary>
            Returns whether the given <see cref="T:TrippyGL.TextureImageFormat"/> represents a depth-stencil format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsImageFormatColorRenderable(TrippyGL.TextureImageFormat)">
            <summary>
            Returns whether the given <see cref="T:TrippyGL.TextureImageFormat"/> is color-renderable.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsFramebufferAttachmentPointColor(TrippyGL.FramebufferAttachmentPoint)">
            <summary>
            Returns whether the specified <see cref="T:TrippyGL.FramebufferAttachmentPoint"/> represents a color[i] attachment.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsRenderbufferFormatDepthOnly(TrippyGL.RenderbufferFormat)">
            <summary>
            Returns whether the specified <see cref="T:TrippyGL.RenderbufferFormat"/> represents a depth-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsRenderbufferFormatStencilOnly(TrippyGL.RenderbufferFormat)">
            <summary>
            Returns whether the specified <see cref="T:TrippyGL.RenderbufferFormat"/> represents a stencil-only format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsRenderbufferFormatDepthStencil(TrippyGL.RenderbufferFormat)">
            <summary>
            Returns whether the specified <see cref="T:TrippyGL.RenderbufferFormat"/> represents a depth-stencil format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.IsRenderbufferFormatColorRenderable(TrippyGL.RenderbufferFormat)">
            <summary>
            Returns whether the specified <see cref="T:TrippyGL.RenderbufferFormat"/> represents a color renderable format.
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetCorrespondingTextureFramebufferAttachmentPoint(TrippyGL.TextureImageFormat)">
            <summary>
            Gets the default valid <see cref="T:TrippyGL.FramebufferAttachmentPoint"/> for a <see cref="T:TrippyGL.TextureImageFormat"/>
            (depth/stencil/depthstencil/color0).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.GetCorrespondingRenderbufferFramebufferAttachmentPoint(TrippyGL.RenderbufferFormat)">
            <summary>
            Gets the default valid <see cref="T:TrippyGL.FramebufferAttachmentPoint"/> for a <see cref="T:TrippyGL.RenderbufferFormat"/>
            (depth/stencil/depthstencil/color0).
            </summary>
        </member>
        <member name="M:TrippyGL.Utils.TrippyUtils.DepthStencilFormatToTextureFormat(TrippyGL.DepthStencilFormat)">
            <summary>
            Gets the <see cref="T:TrippyGL.TextureImageFormat"/> that corresponds for a give <see cref="T:TrippyGL.DepthStencilFormat"/>.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexArray">
            <summary>
            Used for specifying the way vertex attributes are laid out in memory and from which
            <see cref="T:TrippyGL.BufferObjectSubset"/> each vertex attribute comes from. Also stores an optional index buffer.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexArray.Handle">
            <summary>The handle for the GL Vertex Array Object.</summary>
        </member>
        <member name="F:TrippyGL.VertexArray.attribSources">
            <summary>A copy of the <see cref="T:TrippyGL.VertexAttribSource"/>-s provided to the constructor. Should only be read.</summary>
        </member>
        <member name="P:TrippyGL.VertexArray.AttribSources">
            <summary>A list with the sources that will feed the vertex attribute's data on draw calls.</summary>
        </member>
        <member name="F:TrippyGL.VertexArray.IndexBuffer">
            <summary>The buffer subset from which index data will be read, or null for no index buffer.</summary>
        </member>
        <member name="M:TrippyGL.VertexArray.#ctor(TrippyGL.GraphicsDevice,TrippyGL.VertexAttribSource[],TrippyGL.IndexBufferSubset,System.Boolean,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexArray"/>
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="attribSources">
            The <see cref="T:TrippyGL.VertexAttribSource"/> array that will be stored by this <see cref="T:TrippyGL.VertexArray"/>.
            The library user must NOT have a reference to this array!
            </param>
            <param name="indexBuffer">An index buffer to attach to the vertex array, null if none is desired.</param>
            <param name="compensateStructPadding">Whether to compensate for struct padding. Default is true.</param>
            <param name="paddingPackValue">The struct packing value for compensating for padding. Default is 4.</param>
        </member>
        <member name="M:TrippyGL.VertexArray.#ctor(TrippyGL.GraphicsDevice,System.ReadOnlySpan{TrippyGL.VertexAttribSource},TrippyGL.IndexBufferSubset,System.Boolean,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexArray"/> with the specified attribute sources.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="attribSources">The sources from which the data of the vertex attributes will come from.</param>
            <param name="indexBuffer">An index buffer to attach to the vertex array, null if none is desired.</param>
            <param name="compensateStructPadding">Whether to compensate for struct padding. Default is true.</param>
            <param name="paddingPackValue">The struct packing value for compensating for padding. Default is 4.</param>
        </member>
        <member name="M:TrippyGL.VertexArray.#ctor(TrippyGL.GraphicsDevice,TrippyGL.DataBufferSubset,System.ReadOnlySpan{TrippyGL.VertexAttribDescription},TrippyGL.IndexBufferSubset,System.Boolean,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexArray"/> in which all the vertex attributes come interleaved from the same data buffer.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="bufferSubset">The data buffer that stores all the vertex attributes.</param>
            <param name="attribDescriptions">The descriptions of the vertex attributes.</param>
            <param name="indexBuffer">An index buffer to attach to the vertex array, null if none is desired.</param>
            <param name="compensateStructPadding">Whether to compensate for struct padding. Default is true.</param>
            <param name="paddingPackValue">The struct packing value for compensating for padding. Default is 4.</param>
        </member>
        <member name="M:TrippyGL.VertexArray.UpdateVertexAttributes(System.Boolean,System.UInt32)">
            <summary>
            Updates the places where vertex data is read from for this <see cref="T:TrippyGL.VertexArray"/>.
            Call this whenever you modify a buffer subset used by this <see cref="T:TrippyGL.VertexArray"/>.
            </summary>
            <param name="compensateStructPadding">Whether to compensate for struct padding. Default is true.</param>
            <param name="paddingPackValue">The struct packing value for compensating for padding. Default is 4.</param>
        </member>
        <member name="M:TrippyGL.VertexArray.CreateSingleBuffer``1(TrippyGL.GraphicsDevice,TrippyGL.DataBufferSubset,TrippyGL.IndexBufferSubset,System.Boolean,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexArray"/> for the specified vertex type, where all of the vertex attributes come interleaved from the same buffer subset.
            </summary>
            <typeparam name="T">The type of vertex to use.</typeparam>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this resource will use.</param>
            <param name="dataBuffer">The buffer from which all attributes come from.</param>
            <param name="indexBuffer">An index buffer to attach to the vertex array, null if none is desired.</param>
            <param name="compensateStructPadding">Whether to compensate for struct padding. Default is true.</param>
            <param name="paddingPackValue">The struct packing value for compensating for padding. Default is 4.</param>
        </member>
        <member name="T:TrippyGL.VertexArray.AttribCallDesc">
            <summary>
            Manages the calls for a single vertex attribute.
            This is a helper struct used in <see cref="M:TrippyGL.VertexArray.UpdateVertexAttributes(System.Boolean,System.UInt32)"/>
            </summary>
        </member>
        <member name="T:TrippyGL.VertexAttribDescription">
            <summary>
            Describes a vertex attribute. This is, both how it is declared in the shader and how it will be read from a buffer.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.Size">
            <summary>The size of the attribute. A float or int would be 1, a vec2 would be 2, a vec3i would be 3, etc.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.AttribBaseType">
            <summary>The base type of the attribute.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.SizeInBytes">
            <summary>The size in bytes of the attribute. A float is 4, a ivec2 is 8, a vec4 is 16, a double is 8, a mat3 is 36, etc.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.Normalized">
            <summary>Whether the attrib data should be normalized when loaded into shaders.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.AttribIndicesUseCount">
            <summary>The amount of attribute indices this specific attribute occupies. Usually 1, but float matrices for example use one for each row.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.AttribType">
            <summary>The type of the attribute declared in the shader.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribDescription.AttribDivisor">
            <summary>Defines the rate at which this attribute advances when rendering. If 0, it advances once per vertex. Otherwise, it advances once every AttribDivisor instance/s.</summary>
        </member>
        <member name="P:TrippyGL.VertexAttribDescription.IsPadding">
            <summary>Gets whether this <see cref="T:TrippyGL.VertexAttribDescription"/> is only used to indicate padding.</summary>
        </member>
        <member name="M:TrippyGL.VertexAttribDescription.#ctor(Silk.NET.OpenGL.AttributeType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribDescription"/> where the format of the data declared
            in the shader is the same as present in the buffer and no conversion needs to be done.
            </summary>
            <param name="attribType">The type of attribute declared in the shader.</param>
            <param name="attribDivisor">The divisor that defines how reading this attribute advances on instanced rendering.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribDescription.#ctor(Silk.NET.OpenGL.AttributeType,System.Boolean,Silk.NET.OpenGL.VertexAttribPointerType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribDescription"/> where the format of the data declared
            in the shader isn't the same as the format the data will be read as.
            </summary>
            <param name="attribType">The type of the attribute declared in the shader.</param>
            <param name="normalized">Whether the vertex data should be normalized before being loaded into the shader.</param>
            <param name="dataBaseType">The base type in which the data will be read from the buffer.</param>
            <param name="attribDivisor">The divisor that defines how reading this attribute advances on instanced rendering.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribDescription.#ctor(System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribDescription"/> that represents no real attributes and is
            used to indicate padding (unused, ignored buffer memory in between other vertex attribs).
            </summary>
            <param name="paddingBytes">The amount of padding in bytes.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribDescription.CreatePadding(Silk.NET.OpenGL.VertexAttribPointerType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribDescription"/> that specifies padding for an
            amount of bytes calculated based on the baseType and size parameters.
            </summary>
            <remarks>
            Padding indicators ignore padding based on type that occurs when using compensation
            for struct padding (which is the default behavior in <see cref="T:TrippyGL.VertexArray"/>).
            </remarks>
        </member>
        <member name="M:TrippyGL.VertexAttribDescription.CreatePadding(Silk.NET.OpenGL.AttributeType)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribDescription"/> that specifies padding for the amount
            of bytes used by a specified <see cref="T:Silk.NET.OpenGL.AttributeType"/>.
            </summary>
            <remarks>
            Padding indicators ignore padding based on type that occurs when using compensation
            for struct padding (which is the default behavior in <see cref="T:TrippyGL.VertexArray"/>).
            </remarks>
        </member>
        <member name="T:TrippyGL.VertexAttribSource">
            <summary>
            Describes the source for a vertex attribute's data. This stores a <see cref="T:TrippyGL.VertexAttribDescription"/>
            about the attribute and a buffer subset from which the attrib data will come from.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexAttribSource.BufferSubset">
            <summary>The buffer subset from which the vertex attributes will be read.</summary>
        </member>
        <member name="F:TrippyGL.VertexAttribSource.AttribDescription">
            <summary>The description of the vertex attribute.</summary>
        </member>
        <member name="P:TrippyGL.VertexAttribSource.IsPadding">
            <summary>Gets whether this <see cref="T:TrippyGL.VertexAttribSource"/> is only used to indicate padding.</summary>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.#ctor(TrippyGL.DataBufferSubset,TrippyGL.VertexAttribDescription)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> with a given <see cref="T:TrippyGL.BufferObjectSubset"/>
            and the given <see cref="T:TrippyGL.VertexAttribDescription"/>.
            </summary>
            <param name="bufferSubset">The <see cref="T:TrippyGL.BufferObjectSubset"/> where the vertex attrib data is located. Must be a subset usable for vertex data.</param>
            <param name="attribDesc">The <see cref="T:TrippyGL.VertexAttribDescription"/> describing the vertex attribute.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.#ctor(TrippyGL.DataBufferSubset,Silk.NET.OpenGL.AttributeType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> with a given <see cref="T:TrippyGL.BufferObjectSubset"/> and specifies a
            vertex attribute where the data format in the shader and the buffer match and don't need conversion.
            </summary>
            <param name="bufferSubset">The <see cref="T:TrippyGL.BufferObjectSubset"/> where the vertex attrib data is located. Must be a subset usable for vertex data.</param>
            <param name="attribType">The type of attribute declared in the shader.</param>
            <param name="attribDivisor">The divisor that defines how reading this attribute advances on instanced rendering.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.#ctor(TrippyGL.DataBufferSubset,Silk.NET.OpenGL.AttributeType,System.Boolean,Silk.NET.OpenGL.VertexAttribPointerType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> with a given <see cref="T:TrippyGL.BufferObjectSubset"/> and specifies
            a vertex attribute where the data format in the shader and the buffer don't match and need conversion.
            </summary>
            <param name="bufferSubset">The <see cref="T:TrippyGL.BufferObjectSubset"/> where the vertex attrib data is located. Must be a subset usable for vertex data.</param>
            <param name="attribType">The type of attribute declared in the shader.</param>
            <param name="normalized">Whether the data needs to be normalized (uint/ushort/byte -> float between 0 and 1, or int/short/sbyte -> float between -1 and 1).</param>
            <param name="dataBaseType">The base type of the data found on the buffer. If normalized is true, this must be an integer type.</param>
            <param name="attribDivisor">The divisor that defines how reading this attribute advances on instanced rendering.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.#ctor(TrippyGL.DataBufferSubset,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> that represents padding. This means that the created
            <see cref="T:TrippyGL.VertexAttribSource"/> will not indicate a buffer to read data from or use a vertex
            attribute index, it will just leave an ignored space between other attributes.
            </summary>
            <param name="bufferSubset">The <see cref="T:TrippyGL.BufferObjectSubset"/> where the padding will be added.</param>
            <param name="paddingBytes">The amount of space to leave empty, measured in bytes.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.CreatePadding(TrippyGL.DataBufferSubset,Silk.NET.OpenGL.VertexAttribPointerType,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> that specifies padding for an
            amount of bytes calculated based on the baseType and size parameters.
            </summary>
            <param name="bufferSubset">The buffer subset in which the padding will be applied.</param>
            <param name="baseType">The base type of the attribute.</param>
            <param name="size">The size of the attribute.</param>
        </member>
        <member name="M:TrippyGL.VertexAttribSource.CreatePadding(TrippyGL.DataBufferSubset,Silk.NET.OpenGL.AttributeType)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexAttribSource"/> that specifies padding for the amount
            of bytes used by a specified <see cref="T:Silk.NET.OpenGL.AttributeType"/>.
            </summary>
            <param name="bufferSubset">The buffer subset in which the padding will be applied.</param>
            <param name="attribType">The type of the attribute, for calculating paddign.</param>
            <remarks>
            Padding indicators ignore padding based on type that occurs when using compensation
            for struct padding (which is the default behavior in <see cref="T:TrippyGL.VertexArray"/>).
            </remarks>
        </member>
        <member name="T:TrippyGL.VertexBuffer`1">
            <summary>
            Provides a limited but simple way to store vertex data in a single <see cref="T:TrippyGL.BufferObject"/>.
            </summary>
            <typeparam name="T">The type of vertex to use. Must be a struct and implement <see cref="T:TrippyGL.IVertex"/>.</typeparam>
        </member>
        <member name="P:TrippyGL.VertexBuffer`1.IsEmpty">
            <summary>Whether this <see cref="T:TrippyGL.VertexBuffer`1"/> has null values.</summary>
        </member>
        <member name="F:TrippyGL.VertexBuffer`1.Buffer">
            <summary>The <see cref="T:TrippyGL.BufferObject"/> that stores all the vertex and index data.</summary>
        </member>
        <member name="F:TrippyGL.VertexBuffer`1.DataSubset">
            <summary>The <see cref="T:TrippyGL.VertexDataBufferSubset`1"/> that manages the element storage.</summary>
        </member>
        <member name="F:TrippyGL.VertexBuffer`1.VertexArray">
            <summary>The <see cref="T:TrippyGL.VertexArray"/> that defines how the vertex attributes are read.</summary>
        </member>
        <member name="P:TrippyGL.VertexBuffer`1.IndexSubset">
            <summary>The <see cref="T:TrippyGL.IndexBufferSubset"/> that manages the index storage.</summary>
        </member>
        <member name="F:TrippyGL.VertexBuffer`1.ElementSize">
            <summary>The size of a single vertex measured in bytes.</summary>
        </member>
        <member name="P:TrippyGL.VertexBuffer`1.StorageLength">
            <summary>The length of the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage measured in vertices.</summary>
        </member>
        <member name="P:TrippyGL.VertexBuffer`1.IndexStorageLength">
            <summary>The length of the <see cref="T:TrippyGL.VertexBuffer`1"/>'s index storage measured in index elements.</summary>
        </member>
        <member name="P:TrippyGL.VertexBuffer`1.IsDisposed">
            <summary>Whether this <see cref="T:TrippyGL.VertexBuffer`1"/> has been disposed.</summary>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32,Silk.NET.OpenGL.DrawElementsType,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexBuffer`1"/> with specified length, optional index buffer and usage hint.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.VertexBuffer`1"/> will use.</param>
            <param name="storageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage measured in vertices.</param>
            <param name="indexStorageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s index storage measured in index elements, or 0 for no index storage.</param>
            <param name="indexElementType">The type of index element to use.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.#ctor(TrippyGL.GraphicsDevice,System.UInt32,System.UInt32,Silk.NET.OpenGL.DrawElementsType,Silk.NET.OpenGL.BufferUsageARB,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexBuffer`1"/> with specified length, optional index buffer,
            usage hint and initial vertex data.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.VertexBuffer`1"/> will use.</param>
            <param name="storageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage measured in vertices.</param>
            <param name="indexStorageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s index storage measured in index elements, or 0 for no index storage.</param>
            <param name="indexElementType">The type of index element to use.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial vertex data.</param>
            <param name="dataWriteOffset">The offset into the vertex subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.#ctor(TrippyGL.GraphicsDevice,System.UInt32,Silk.NET.OpenGL.BufferUsageARB,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexBuffer`1"/> with specified initial vertex data and length but no index buffer.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.VertexBuffer`1"/> will use.</param>
            <param name="storageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage measured in vertices.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial vertex data.</param>
            <param name="dataWriteOffset">The offset into the vertex subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.#ctor(TrippyGL.GraphicsDevice,System.ReadOnlySpan{`0},Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexBuffer`1"/> with specified initial vertex data and
            same length as that data <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.VertexBuffer`1"/> will use.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial vertex data.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.#ctor(TrippyGL.GraphicsDevice,System.UInt32,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexBuffer`1"/> with specified length and undefined initial data.
            </summary>
            <param name="graphicsDevice">The <see cref="T:TrippyGL.GraphicsDevice"/> this <see cref="T:TrippyGL.VertexBuffer`1"/> will use.</param>
            <param name="storageLength">The length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage measured in vertices.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.op_Implicit(TrippyGL.VertexBuffer{`0})~TrippyGL.VertexArray">
            <summary>
            Implicit cast to a <see cref="T:TrippyGL.VertexArray"/> allows a <see cref="T:TrippyGL.VertexBuffer`1"/>
            to be set directly onto <see cref="P:TrippyGL.GraphicsDevice.VertexArray"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.RecreateStorage(System.UInt32,System.UInt32,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Recreates this <see cref="T:TrippyGL.VertexBuffer`1"/>'s storage with a new size.<para/>
            The contents of the <see cref="T:TrippyGL.VertexBuffer`1"/>'s storage are undefined after this operation.
            </summary>
            <param name="storageLength">The new length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s element storage.</param>
            <param name="indexStorageLength">The new length for the <see cref="T:TrippyGL.VertexBuffer`1"/>'s index storage. 0 means either no index storage or keep previous length.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance. 0 for same as before.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.RecreateStorage(System.UInt32,Silk.NET.OpenGL.BufferUsageARB)">
            <summary>
            Recreate this <see cref="T:TrippyGL.VertexBuffer`1"/>'s storage with a new size and <see cref="T:Silk.NET.OpenGL.BufferUsageARB"/>.<para/>
            The contents of the <see cref="T:TrippyGL.VertexBuffer`1"/>'s storage are undefined after this operation.
            </summary>
            <param name="storageLength">The desired new length for the storage measured in elements.</param>
            <param name="usageHint">Used by the graphics driver to optimize performance. 0 for same as before.</param>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.Dispose">
            <summary>
            Disposes the <see cref="T:TrippyGL.GraphicsResource"/>-s used by this <see cref="T:TrippyGL.VertexBuffer`1"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.VertexBuffer`1.ValidateStorageLength(System.UInt32)">
            <summary>
            Checks that the given storage length value is valid and throws an exception if it's not.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexColor">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position and <see cref="T:TrippyGL.Color4b"/> Color.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexColor.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexColor"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexColor.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexColor.Color">
            <summary>The vertex's color.</summary>
        </member>
        <member name="M:TrippyGL.VertexColor.#ctor(System.Numerics.Vector3,TrippyGL.Color4b)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexColor"/> with the specified position and color.
            </summary>
        </member>
        <member name="M:TrippyGL.VertexColor.#ctor(System.Numerics.Vector3)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexColor"/> with the specified position and white color.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexColorTexture">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position, <see cref="T:TrippyGL.Color4b"/> Color and <see cref="T:System.Numerics.Vector2"/> TexCoords.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexColorTexture.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexColorTexture"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexColorTexture.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexColorTexture.Color">
            <summary>The vertex's color.</summary>
        </member>
        <member name="F:TrippyGL.VertexColorTexture.TexCoords">
            <summary>The vertex's texture coordinates.</summary>
        </member>
        <member name="M:TrippyGL.VertexColorTexture.#ctor(System.Numerics.Vector3,TrippyGL.Color4b,System.Numerics.Vector2)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexColorTexture"/> with the specified position, color and texture coordinates.
            </summary>
        </member>
        <member name="M:TrippyGL.VertexColorTexture.#ctor(System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexColorTexture"/> with the specified position and texture coordinates, and white color.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexDataBufferSubset`1">
            <summary>
            A <see cref="T:TrippyGL.DataBufferSubset`1"/> whose purpose is to store vertex data.
            </summary>
            <typeparam name="T">The type of struct (element) this <see cref="T:TrippyGL.VertexDataBufferSubset`1"/> will manage.</typeparam>
        </member>
        <member name="M:TrippyGL.VertexDataBufferSubset`1.#ctor(TrippyGL.BufferObject,System.UInt32,System.UInt32,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexDataBufferSubset`1"/> with the given <see cref="T:TrippyGL.BufferObject"/>
            and target, offset into the buffer in bytes, storage length in elements and optional initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="storageOffsetBytes">The offset into the <see cref="T:TrippyGL.BufferObject"/>'s storage where this subset begins.</param>
            <param name="storageLength">The length of this subset measured in elements.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="M:TrippyGL.VertexDataBufferSubset`1.#ctor(TrippyGL.BufferObject,System.ReadOnlySpan{`0},System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexDataBufferSubset`1"/> with the given <see cref="T:TrippyGL.BufferObject"/>
            and target, with the subset covering the entire buffer's storage and optional initial data.
            </summary>
            <param name="bufferObject">The <see cref="T:TrippyGL.BufferObject"/> this subset will belong to.</param>
            <param name="data">A <see cref="T:System.ReadOnlySpan`1"/> containing the initial data to set to the subset, or empty.</param>
            <param name="dataWriteOffset">The offset into the subset's storage at which to start writting the initial data.</param>
        </member>
        <member name="T:TrippyGL.VertexNormal">
            <summary>
            Represents a vertex with a <see cref="T:System.Numerics.Vector3"/> Position and <see cref="T:System.Numerics.Vector3"/> Normal.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexNormal.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexNormal"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormal.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormal.Normal">
            <summary>The vertex's normal.</summary>
        </member>
        <member name="M:TrippyGL.VertexNormal.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexNormal"/> with the specified position and normal.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexNormalColor">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position, <see cref="T:System.Numerics.Vector3"/> Normal and <see cref="T:TrippyGL.Color4b"/> Color.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColor.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexNormalColor"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColor.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColor.Normal">
            <summary>The vertex's normal.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColor.Color">
            <summary>The vertex's color.</summary>
        </member>
        <member name="M:TrippyGL.VertexNormalColor.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,TrippyGL.Color4b)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexNormalColor"/> with the specified position, normal and color.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexNormalColorTexture">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position, <see cref="T:System.Numerics.Vector3"/> Normal,
            <see cref="T:TrippyGL.Color4b"/> Color and <see cref="T:System.Numerics.Vector2"/> TexCoords.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColorTexture.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexNormalColorTexture"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColorTexture.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColorTexture.Normal">
            <summary>The vertex's normal.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColorTexture.Color">
            <summary>The vertex's color.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalColorTexture.TexCoords">
            <summary>The vertex's texture coordinates.</summary>
        </member>
        <member name="M:TrippyGL.VertexNormalColorTexture.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,TrippyGL.Color4b,System.Numerics.Vector2)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexNormalColorTexture"/> with the specified position, normal, color and texture coordinates.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexNormalTexture">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position, <see cref="T:System.Numerics.Vector3"/> Normal and <see cref="T:System.Numerics.Vector2"/> TexCoords.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexNormalTexture.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexNormalTexture"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalTexture.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalTexture.Normal">
            <summary>The vertex's normal.</summary>
        </member>
        <member name="F:TrippyGL.VertexNormalTexture.TexCoords">
            <summary>The vertex's texture coordinates.</summary>
        </member>
        <member name="M:TrippyGL.VertexNormalTexture.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexNormalTexture"/> with the specified position, normal and texture coordinates.
            </summary>
        </member>
        <member name="T:TrippyGL.VertexPosition">
            <summary>
            Represents a vertex with only a <see cref="T:System.Numerics.Vector3"/> Position.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexPosition.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexPosition"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexPosition.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="M:TrippyGL.VertexPosition.#ctor(System.Numerics.Vector3)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexPosition"/> with the specified position.
            </summary>
            <param name="position">The vertex position.</param>
        </member>
        <member name="M:TrippyGL.VertexPosition.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexPosition"/> with the specified position.
            </summary>
            <param name="x">The X component of the position.</param>
            <param name="y">The Y component of the position.</param>
            <param name="z">The Z component of the position.</param>
        </member>
        <member name="T:TrippyGL.VertexTexture">
            <summary>
            Represents a vertex with <see cref="T:System.Numerics.Vector3"/> Position and <see cref="T:System.Numerics.Vector2"/> TexCoords.
            </summary>
        </member>
        <member name="F:TrippyGL.VertexTexture.SizeInBytes">
            <summary>The size of a <see cref="T:TrippyGL.VertexTexture"/> measured in bytes.</summary>
        </member>
        <member name="F:TrippyGL.VertexTexture.Position">
            <summary>The vertex's position.</summary>
        </member>
        <member name="F:TrippyGL.VertexTexture.TexCoords">
            <summary>The vertex's texture coordinates.</summary>
        </member>
        <member name="M:TrippyGL.VertexTexture.#ctor(System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Creates a <see cref="T:TrippyGL.VertexTexture"/> with the specified position and texture coordinates.
            </summary>
        </member>
        <member name="T:TrippyGL.Viewport">
            <summary>
            A rectangle used to define drawing areas.
            </summary>
        </member>
        <member name="F:TrippyGL.Viewport.X">
            <summary>The X coordinate of the first pixel inside this <see cref="T:TrippyGL.Viewport"/>.</summary>
        </member>
        <member name="F:TrippyGL.Viewport.Y">
            <summary>The Y coordinate of the first pixel inside this <see cref="T:TrippyGL.Viewport"/>.</summary>
        </member>
        <member name="F:TrippyGL.Viewport.Width">
            <summary>The width of this <see cref="T:TrippyGL.Viewport"/> measured in pixels.</summary>
        </member>
        <member name="F:TrippyGL.Viewport.Height">
            <summary>The height of this <see cref="T:TrippyGL.Viewport"/> measured in pixels.</summary>
        </member>
        <member name="P:TrippyGL.Viewport.Right">
            <summary>
            Gets or sets the value of <see cref="F:TrippyGL.Viewport.X"/> + <see cref="F:TrippyGL.Viewport.Width"/>. Setting this will only modify the <see cref="F:TrippyGL.Viewport.Width"/>.
            </summary>
        </member>
        <member name="P:TrippyGL.Viewport.Bottom">
            <summary>
            Gets or sets the value of <see cref="F:TrippyGL.Viewport.Y"/> + <see cref="F:TrippyGL.Viewport.Height"/>. Setting this will only modify the <see cref="F:TrippyGL.Viewport.Height"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Viewport.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Creates a <see cref="T:TrippyGL.Viewport"/> with the specified parameters.
            </summary>
        </member>
        <member name="M:TrippyGL.Viewport.#ctor(System.Drawing.Rectangle@)">
            <summary>
            Creates a <see cref="T:TrippyGL.Viewport"/> from a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:TrippyGL.Viewport.Contains(TrippyGL.Viewport@)">
            <summary>
            Returns whether another <see cref="T:TrippyGL.Viewport"/> is enclosed fully inside this <see cref="T:TrippyGL.Viewport"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Viewport.Intersects(TrippyGL.Viewport@)">
            <summary>
            Returns whether another <see cref="T:TrippyGL.Viewport"/> intersects at least one pixel with this <see cref="T:TrippyGL.Viewport"/>.
            </summary>
        </member>
        <member name="M:TrippyGL.Viewport.Intersection(TrippyGL.Viewport@)">
            <summary>
            Returns a <see cref="T:TrippyGL.Viewport"/> whose area is the intersection between this and another <see cref="T:TrippyGL.Viewport"/>.
            </summary>
        </member>
    </members>
</doc>
